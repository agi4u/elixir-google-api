# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.NetworkServices.V1.Model.HttpRouteRouteRule do
  @moduledoc """
  Specifies how to match traffic and how to route traffic when traffic is matched.

  ## Attributes

  *   `action` (*type:* `GoogleApi.NetworkServices.V1.Model.HttpRouteRouteAction.t`, *default:* `nil`) - The detailed rule defining how to route matched traffic.
  *   `matches` (*type:* `list(GoogleApi.NetworkServices.V1.Model.HttpRouteRouteMatch.t)`, *default:* `nil`) - A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic. If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :action => GoogleApi.NetworkServices.V1.Model.HttpRouteRouteAction.t() | nil,
          :matches => list(GoogleApi.NetworkServices.V1.Model.HttpRouteRouteMatch.t()) | nil
        }

  field(:action, as: GoogleApi.NetworkServices.V1.Model.HttpRouteRouteAction)
  field(:matches, as: GoogleApi.NetworkServices.V1.Model.HttpRouteRouteMatch, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.NetworkServices.V1.Model.HttpRouteRouteRule do
  def decode(value, options) do
    GoogleApi.NetworkServices.V1.Model.HttpRouteRouteRule.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.NetworkServices.V1.Model.HttpRouteRouteRule do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
