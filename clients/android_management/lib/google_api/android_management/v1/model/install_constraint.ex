# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.AndroidManagement.V1.Model.InstallConstraint do
  @moduledoc """
  Amongst apps with InstallType set to: FORCE_INSTALLED PREINSTALLEDthis defines a set of restrictions for the app installation. At least one of the fields must be set. When multiple fields are set, then all the constraints need to be satisfied for the app to be installed.

  ## Attributes

  *   `chargingConstraint` (*type:* `String.t`, *default:* `nil`) - Optional. Charging constraint.
  *   `deviceIdleConstraint` (*type:* `String.t`, *default:* `nil`) - Optional. Device idle constraint.
  *   `networkTypeConstraint` (*type:* `String.t`, *default:* `nil`) - Optional. Network type constraint.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :chargingConstraint => String.t() | nil,
          :deviceIdleConstraint => String.t() | nil,
          :networkTypeConstraint => String.t() | nil
        }

  field(:chargingConstraint)
  field(:deviceIdleConstraint)
  field(:networkTypeConstraint)
end

defimpl Poison.Decoder, for: GoogleApi.AndroidManagement.V1.Model.InstallConstraint do
  def decode(value, options) do
    GoogleApi.AndroidManagement.V1.Model.InstallConstraint.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.AndroidManagement.V1.Model.InstallConstraint do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
