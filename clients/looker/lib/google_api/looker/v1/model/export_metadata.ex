# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Looker.V1.Model.ExportMetadata do
  @moduledoc """
  ExportMetadata represents the metadata of the exported artifacts. The metadata.json file in export artifact can be parsed as this message

  ## Attributes

  *   `exportEncryptionKey` (*type:* `GoogleApi.Looker.V1.Model.ExportMetadataEncryptionKey.t`, *default:* `nil`) - Encryption key that was used to encrypt the export artifacts.
  *   `filePaths` (*type:* `list(String.t)`, *default:* `nil`) - List of files created as part of export artifact (excluding the metadata). The paths are relative to the folder containing the metadata.
  *   `lookerEncryptionKey` (*type:* `String.t`, *default:* `nil`) - Looker encryption key, encrypted with the provided export encryption key. This value will only be populated if the looker instance uses Looker managed encryption instead of CMEK.
  *   `lookerInstance` (*type:* `String.t`, *default:* `nil`) - Name of the exported instance. Format: projects/{project}/locations/{location}/instances/{instance}
  *   `lookerPlatformEdition` (*type:* `String.t`, *default:* `nil`) - Platform edition of the exported instance.
  *   `lookerVersion` (*type:* `String.t`, *default:* `nil`) - Version of instance when the export was created.
  *   `source` (*type:* `String.t`, *default:* `nil`) - The source type of the migration.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :exportEncryptionKey => GoogleApi.Looker.V1.Model.ExportMetadataEncryptionKey.t() | nil,
          :filePaths => list(String.t()) | nil,
          :lookerEncryptionKey => String.t() | nil,
          :lookerInstance => String.t() | nil,
          :lookerPlatformEdition => String.t() | nil,
          :lookerVersion => String.t() | nil,
          :source => String.t() | nil
        }

  field(:exportEncryptionKey, as: GoogleApi.Looker.V1.Model.ExportMetadataEncryptionKey)
  field(:filePaths, type: :list)
  field(:lookerEncryptionKey)
  field(:lookerInstance)
  field(:lookerPlatformEdition)
  field(:lookerVersion)
  field(:source)
end

defimpl Poison.Decoder, for: GoogleApi.Looker.V1.Model.ExportMetadata do
  def decode(value, options) do
    GoogleApi.Looker.V1.Model.ExportMetadata.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Looker.V1.Model.ExportMetadata do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
