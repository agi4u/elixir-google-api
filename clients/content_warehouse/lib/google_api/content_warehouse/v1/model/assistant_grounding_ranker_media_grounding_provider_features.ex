# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantGroundingRankerMediaGroundingProviderFeatures do
  @moduledoc """
  Features to be passed from Media GP to HGR. Next ID: 21

  ## Attributes

  *   `albumReleaseType` (*type:* `String.t`, *default:* `nil`) - Release type for an album container.
  *   `ambiguityClassifier` (*type:* `String.t`, *default:* `nil`) - Temporary ambiguity classifier signals.
  *   `entityMid` (*type:* `String.t`, *default:* `nil`) - Mid of the media item. This is currently only used in manual rules.
  *   `hasCastVideoDeeplink` (*type:* `boolean()`, *default:* `nil`) - True if the candidate has a CAST_VIDEO deeplink regardless of which provider was chosen.
  *   `hasTypeSemanticEdge` (*type:* `boolean()`, *default:* `nil`) - True if the argument's type was explicitly mentioned in the query.
  *   `isCastVideo` (*type:* `boolean()`, *default:* `nil`) - Whether the candidate is YouTube CAST_VIDEO candidate. CAST_VIDEO is a deeplink platform. This signal will be used to promote YouTube Music screenful candidates with CAST_VIDEO platform for free users because free users cannot get exact entities in screenless response and can get exact entities with ads in screenful response.
  *   `isExclusiveOriginalProvider` (*type:* `boolean()`, *default:* `nil`) - True if the media item in Binding Set is exclusively available on the provider in Binding set. Example: "Stranger things" is exclusive to "Netflix".
  *   `isMediaSearchQuerySubsetOfEntityNameAndArtist` (*type:* `boolean()`, *default:* `nil`) - True if the media search query is included in the entity name and artists.
  *   `isMostRecentSongAlbumAmbiguous` (*type:* `boolean()`, *default:* `nil`) - 
  *   `isSeedRadio` (*type:* `boolean()`, *default:* `nil`) - True if the media deeplink has tag SEED_RADIO.
  *   `isSeedRadioRequest` (*type:* `boolean()`, *default:* `nil`) - True if the user requests seed radio.
  *   `isSelfReportedSvodProvider` (*type:* `boolean()`, *default:* `nil`) - Provider is a self(user) reported subscripted provider https://g3doc.corp.google.com/knowledge/g3doc/ump/development/GetProviderAffinity.md?cl=head
  *   `isYoutubeMusicSeeking` (*type:* `boolean()`, *default:* `nil`) - Indicates whether this is youtube content seeking music.
  *   `mediaAccountType` (*type:* `String.t`, *default:* `nil`) - Account Type of the user for the provider
  *   `mediaContentType` (*type:* `String.t`, *default:* `nil`) - MediaAquaAction::media_content_type from interpretation. It can be used for cross-content type ranking, for example, if a candidate's content type does not match this content type from interpretation, this candidate will be slightly demoted. Also, we might avoid fetching some signals when the content type is generic music, since some content types do not need ranking.
  *   `mscRate` (*type:* `number()`, *default:* `nil`) - MSC(Media Short Click) rate. MSC rate = total number of MSC events / total number of MSC candidates The event is considered as MSC candidate if the event is a media seeking query(excluding follow-ons) and the media result is successfully fulfilled. The event is MSC event if any of the following is in the following queries within 30 secs: FOLLOWED_BY_DUPLICATE FOLLOWED_BY_ADD_OR_DELETE_MANUAL_REFINEMENT FOLLOWED_BY_SAME_VERTICAL (MEDIA) FOLLOWED_BY_STOP More details: go/media-ranking, go/billboard-navboost, go/magma-music-actions-efrac
  *   `scubedPSaiMusic` (*type:* `float()`, *default:* `nil`) - Scubed predicted SAI value (pSAI - SCUBED_MUSIC_ACTIONS) for music populated by a regression model that incorporates a BERT model signal as well as other Scubed signals.
  *   `scubedPSaiTvm` (*type:* `float()`, *default:* `nil`) - Scubed predicted SAI value (pSAI - SCUBED_TVM_ACTIONS) for music populated by a regression model that incorporates a BERT model signal as well as other Scubed signals.
  *   `type` (*type:* `String.t`, *default:* `nil`) - Type of the media item.
  *   `youtubeConfidenceScore` (*type:* `float()`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :albumReleaseType => String.t() | nil,
          :ambiguityClassifier => String.t() | nil,
          :entityMid => String.t() | nil,
          :hasCastVideoDeeplink => boolean() | nil,
          :hasTypeSemanticEdge => boolean() | nil,
          :isCastVideo => boolean() | nil,
          :isExclusiveOriginalProvider => boolean() | nil,
          :isMediaSearchQuerySubsetOfEntityNameAndArtist => boolean() | nil,
          :isMostRecentSongAlbumAmbiguous => boolean() | nil,
          :isSeedRadio => boolean() | nil,
          :isSeedRadioRequest => boolean() | nil,
          :isSelfReportedSvodProvider => boolean() | nil,
          :isYoutubeMusicSeeking => boolean() | nil,
          :mediaAccountType => String.t() | nil,
          :mediaContentType => String.t() | nil,
          :mscRate => number() | nil,
          :scubedPSaiMusic => float() | nil,
          :scubedPSaiTvm => float() | nil,
          :type => String.t() | nil,
          :youtubeConfidenceScore => float() | nil
        }

  field(:albumReleaseType)
  field(:ambiguityClassifier)
  field(:entityMid)
  field(:hasCastVideoDeeplink)
  field(:hasTypeSemanticEdge)
  field(:isCastVideo)
  field(:isExclusiveOriginalProvider)
  field(:isMediaSearchQuerySubsetOfEntityNameAndArtist)
  field(:isMostRecentSongAlbumAmbiguous)
  field(:isSeedRadio)
  field(:isSeedRadioRequest)
  field(:isSelfReportedSvodProvider)
  field(:isYoutubeMusicSeeking)
  field(:mediaAccountType)
  field(:mediaContentType)
  field(:mscRate)
  field(:scubedPSaiMusic)
  field(:scubedPSaiTvm)
  field(:type)
  field(:youtubeConfidenceScore)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AssistantGroundingRankerMediaGroundingProviderFeatures do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantGroundingRankerMediaGroundingProviderFeatures.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AssistantGroundingRankerMediaGroundingProviderFeatures do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
