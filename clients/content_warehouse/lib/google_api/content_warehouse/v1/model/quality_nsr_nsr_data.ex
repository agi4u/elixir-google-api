# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.QualityNsrNsrData do
  @moduledoc """
  NOTE: When adding a new field to be propagated to Raffia check if NsrPatternSignalSpec needs to be updated. Next ID: 56

  ## Attributes

  *   `tofu` (*type:* `number()`, *default:* `nil`) - Site-level tofu score: site quality predictor based on content.
  *   `healthScore` (*type:* `number()`, *default:* `nil`) - Categorical signals.
  *   `siteAutopilotScore` (*type:* `number()`, *default:* `nil`) - Aggregated value of url autopilot scores for this sitechunk.
  *   `clutterScore` (*type:* `number()`, *default:* `nil`) - Delta site-level signal in Q* penalizing sites with a large number of distracting/annoying resources loaded by the site (see go/clutter-v0).
  *   `sitePr` (*type:* `number()`, *default:* `nil`) - 
  *   `nsrOverrideBid` (*type:* `number()`, *default:* `nil`) - This signal is used to unconditionally override NSR as a bid in Q*. Should only be used in case of emergency (see go/nsr-override-bid). To have any effect, the value should be present and greater than 0.001.
  *   `clusterUplift` (*type:* `GoogleApi.ContentWarehouse.V1.Model.QualityNsrNsrDataClusterUplift.t`, *default:* `nil`) - 
  *   `ymylNewsV2Score` (*type:* `number()`, *default:* `nil`) - 
  *   `smallPersonalSite` (*type:* `number()`, *default:* `nil`) - Score of small personal site promotion go/promoting-personal-blogs-v1
  *   `articleScoreV2` (*type:* `number()`, *default:* `nil`) - 
  *   `pnav` (*type:* `number()`, *default:* `nil`) - Fractional signals.
  *   `versionedData` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.QualityNsrNSRVersionedData.t)`, *default:* `nil`) - Versioned map of NSR values for experimenting with the next release.
  *   `localityScore` (*type:* `number()`, *default:* `nil`) - Locality score of the site, i.e. the locality component of the LocalAuthority signal (see go/pq-localauthority).
  *   `pnavClicks` (*type:* `number()`, *default:* `nil`) - denominator for the pnav computation
  *   `shoppingScore` (*type:* `number()`, *default:* `nil`) - 
  *   `chardVariance` (*type:* `number()`, *default:* `nil`) - 
  *   `clusterId` (*type:* `integer()`, *default:* `nil`) - An id for defining clusters of sites. Used in ecosystem experiments (project Tundra).
  *   `metadata` (*type:* `GoogleApi.ContentWarehouse.V1.Model.QualityNsrNsrDataMetadata.t`, *default:* `nil`) - 
  *   `language` (*type:* `integer()`, *default:* `nil`) - 
  *   `url` (*type:* `String.t`, *default:* `nil`) - 
  *   `chardEncoded` (*type:* `integer()`, *default:* `nil`) - Site-level chard score: site quality predictor based on content.
  *   `nsrdataFromFallbackPatternKey` (*type:* `boolean()`, *default:* `nil`) - If true indicates that we do not have NSR data computed for the chunk, and instead the data is coming from an average of other host chunks.
  *   `i18nBucket` (*type:* `integer()`, *default:* `nil`) - Currently corresponds to i18n_g42_bucket.
  *   `chromeInTotal` (*type:* `number()`, *default:* `nil`) - Site-level Chrome views.
  *   `directFrac` (*type:* `number()`, *default:* `nil`) - 
  *   `siteQualityStddevs` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.QualityNsrVersionedFloatSignal.t)`, *default:* `nil`) - 
  *   `host` (*type:* `String.t`, *default:* `nil`) - 
  *   `spambrainLavcScores` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.QualityNsrVersionedFloatSignal.t)`, *default:* `nil`) - 
  *   `vlqNsr` (*type:* `number()`, *default:* `nil`) - NSR from a headroom model targeting low-quality video sites.
  *   `isCovidLocalAuthority` (*type:* `boolean()`, *default:* `nil`) - Bit to determine whether the site has the local authority covid signal, as computed by go/covid-local-authority
  *   `largeOrgId` (*type:* `integer()`, *default:* `nil`) - 
  *   `siteChunk` (*type:* `String.t`, *default:* `nil`) - Primary NSR sitechunk. In most of the cases it's same as HOST_LEVEL_V3 sitechunked canonical url of the document. In rare, but important cases it's based on page markup (see quality/nsr/util/sitechunker.h for details).
  *   `isElectionAuthority` (*type:* `boolean()`, *default:* `nil`) - Bit to determine whether the site has the election authority signal, as computed by go/election-authority
  *   `isVideoFocusedSite` (*type:* `boolean()`, *default:* `nil`) - Bit to determine whether the site has mostly video content, but is not hosted on any known video-hosting domains. Site is considered to be video-focused, if it has > 50% of the URLs with watch pages (with smoothing prior). ariane/4045246
  *   `clutterScores` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.QualityNsrVersionedFloatSignal.t)`, *default:* `nil`) - 
  *   `impressions` (*type:* `number()`, *default:* `nil`) - Site-level impressions.
  *   `newNsr` (*type:* `number()`, *default:* `nil`) - This field used as a temporary field for clean transitions when we need to roll out Q* and NSR changes simultaneously.
  *   `siteLinkOut` (*type:* `number()`, *default:* `nil`) - Aggregated value of url link out scores for this sitechunk.
  *   `siteQualityStddev` (*type:* `number()`, *default:* `nil`) - Estimate of site's PQ rating stddev--spread of the page-level PQ ratings of a site. Note this is different from nsr_variance which predicts error of NSR itself from the aggregated site-level rating.
  *   `vlq` (*type:* `number()`, *default:* `nil`) - Score of the Video LQ model.
  *   `nsrVariance` (*type:* `number()`, *default:* `nil`) - NSR variance logodds [0, infinity).
  *   `priorAdjustedNsr` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.QualityNsrVersionedFloatSignal.t)`, *default:* `nil`) - NSR - prior. Estimate of whether the site is above/below average NSR in its slice.
  *   `siteLinkIn` (*type:* `number()`, *default:* `nil`) - Average value of the site_link_in for pages in the sitechunk.
  *   `nsr` (*type:* `number()`, *default:* `nil`) - 
  *   `nsrEpoch` (*type:* `String.t`, *default:* `nil`) - The epoch from which this NSR value is coming from.
  *   `ugcScore` (*type:* `number()`, *default:* `nil`) - 
  *   `siteChunkSource` (*type:* `String.t`, *default:* `nil`) - These are only annotated in the Goldmine NSR annotator.
  *   `secondarySiteChunk` (*type:* `String.t`, *default:* `nil`) - Secondary NSR sitechunk. When present, it provides more granular chunking than primary sitechunks (see quality/nsr/util/sitechunker.h for details).
  *   `videoScore` (*type:* `number()`, *default:* `nil`) - 
  *   `articleScore` (*type:* `number()`, *default:* `nil`) - Score from article classification of the site.
  *   `spambrainLavcScore` (*type:* `number()`, *default:* `nil`) - The SpamBrain LAVC score, as of July 2022. See more information at go/cloverfield-lavc-deck.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :tofu => number() | nil,
          :healthScore => number() | nil,
          :siteAutopilotScore => number() | nil,
          :clutterScore => number() | nil,
          :sitePr => number() | nil,
          :nsrOverrideBid => number() | nil,
          :clusterUplift =>
            GoogleApi.ContentWarehouse.V1.Model.QualityNsrNsrDataClusterUplift.t() | nil,
          :ymylNewsV2Score => number() | nil,
          :smallPersonalSite => number() | nil,
          :articleScoreV2 => number() | nil,
          :pnav => number() | nil,
          :versionedData =>
            list(GoogleApi.ContentWarehouse.V1.Model.QualityNsrNSRVersionedData.t()) | nil,
          :localityScore => number() | nil,
          :pnavClicks => number() | nil,
          :shoppingScore => number() | nil,
          :chardVariance => number() | nil,
          :clusterId => integer() | nil,
          :metadata => GoogleApi.ContentWarehouse.V1.Model.QualityNsrNsrDataMetadata.t() | nil,
          :language => integer() | nil,
          :url => String.t() | nil,
          :chardEncoded => integer() | nil,
          :nsrdataFromFallbackPatternKey => boolean() | nil,
          :i18nBucket => integer() | nil,
          :chromeInTotal => number() | nil,
          :directFrac => number() | nil,
          :siteQualityStddevs =>
            list(GoogleApi.ContentWarehouse.V1.Model.QualityNsrVersionedFloatSignal.t()) | nil,
          :host => String.t() | nil,
          :spambrainLavcScores =>
            list(GoogleApi.ContentWarehouse.V1.Model.QualityNsrVersionedFloatSignal.t()) | nil,
          :vlqNsr => number() | nil,
          :isCovidLocalAuthority => boolean() | nil,
          :largeOrgId => integer() | nil,
          :siteChunk => String.t() | nil,
          :isElectionAuthority => boolean() | nil,
          :isVideoFocusedSite => boolean() | nil,
          :clutterScores =>
            list(GoogleApi.ContentWarehouse.V1.Model.QualityNsrVersionedFloatSignal.t()) | nil,
          :impressions => number() | nil,
          :newNsr => number() | nil,
          :siteLinkOut => number() | nil,
          :siteQualityStddev => number() | nil,
          :vlq => number() | nil,
          :nsrVariance => number() | nil,
          :priorAdjustedNsr =>
            list(GoogleApi.ContentWarehouse.V1.Model.QualityNsrVersionedFloatSignal.t()) | nil,
          :siteLinkIn => number() | nil,
          :nsr => number() | nil,
          :nsrEpoch => String.t() | nil,
          :ugcScore => number() | nil,
          :siteChunkSource => String.t() | nil,
          :secondarySiteChunk => String.t() | nil,
          :videoScore => number() | nil,
          :articleScore => number() | nil,
          :spambrainLavcScore => number() | nil
        }

  field(:tofu)
  field(:healthScore)
  field(:siteAutopilotScore)
  field(:clutterScore)
  field(:sitePr)
  field(:nsrOverrideBid)
  field(:clusterUplift, as: GoogleApi.ContentWarehouse.V1.Model.QualityNsrNsrDataClusterUplift)
  field(:ymylNewsV2Score)
  field(:smallPersonalSite)
  field(:articleScoreV2)
  field(:pnav)

  field(:versionedData,
    as: GoogleApi.ContentWarehouse.V1.Model.QualityNsrNSRVersionedData,
    type: :list
  )

  field(:localityScore)
  field(:pnavClicks)
  field(:shoppingScore)
  field(:chardVariance)
  field(:clusterId)
  field(:metadata, as: GoogleApi.ContentWarehouse.V1.Model.QualityNsrNsrDataMetadata)
  field(:language)
  field(:url)
  field(:chardEncoded)
  field(:nsrdataFromFallbackPatternKey)
  field(:i18nBucket)
  field(:chromeInTotal)
  field(:directFrac)

  field(:siteQualityStddevs,
    as: GoogleApi.ContentWarehouse.V1.Model.QualityNsrVersionedFloatSignal,
    type: :list
  )

  field(:host)

  field(:spambrainLavcScores,
    as: GoogleApi.ContentWarehouse.V1.Model.QualityNsrVersionedFloatSignal,
    type: :list
  )

  field(:vlqNsr)
  field(:isCovidLocalAuthority)
  field(:largeOrgId)
  field(:siteChunk)
  field(:isElectionAuthority)
  field(:isVideoFocusedSite)

  field(:clutterScores,
    as: GoogleApi.ContentWarehouse.V1.Model.QualityNsrVersionedFloatSignal,
    type: :list
  )

  field(:impressions)
  field(:newNsr)
  field(:siteLinkOut)
  field(:siteQualityStddev)
  field(:vlq)
  field(:nsrVariance)

  field(:priorAdjustedNsr,
    as: GoogleApi.ContentWarehouse.V1.Model.QualityNsrVersionedFloatSignal,
    type: :list
  )

  field(:siteLinkIn)
  field(:nsr)
  field(:nsrEpoch)
  field(:ugcScore)
  field(:siteChunkSource)
  field(:secondarySiteChunk)
  field(:videoScore)
  field(:articleScore)
  field(:spambrainLavcScore)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.QualityNsrNsrData do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.QualityNsrNsrData.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.QualityNsrNsrData do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
