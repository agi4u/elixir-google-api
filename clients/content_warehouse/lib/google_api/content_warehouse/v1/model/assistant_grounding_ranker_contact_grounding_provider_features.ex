# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantGroundingRankerContactGroundingProviderFeatures do
  @moduledoc """
  Features to be passed from Contact GP to HGR. Next ID: 13

  ## Attributes

  *   `conceptId` (*type:* `String.t`, *default:* `nil`) - Concept id for relationships in English, e.g. "Mother" for all non-English locales. It's only populated for source = RELATIONSHIP.
  *   `contactSource` (*type:* `String.t`, *default:* `nil`) - 
  *   `isRelationshipFromAnnotation` (*type:* `boolean()`, *default:* `nil`) - Whether the query is a relationship query based on the annotation source.
  *   `isRelationshipFromSource` (*type:* `boolean()`, *default:* `nil`) - Whether the contact has relationship in the contact metadata.
  *   `isSingleCandidate` (*type:* `boolean()`, *default:* `nil`) - Whether only populates a single candidate.
  *   `isStarred` (*type:* `boolean()`, *default:* `nil`) - Whether the contact is starred contact.
  *   `matchedNameType` (*type:* `String.t`, *default:* `nil`) - 
  *   `numAlternateNameFromFuzzyContactMatch` (*type:* `number()`, *default:* `nil`) - Number of alternate contact names from fuzzy contact match. (Not suggest using it since it can change due to retrieval iteration)
  *   `numAlternateNamesFromS3` (*type:* `number()`, *default:* `nil`) - Number of alternate contact names from S3_HYPOTHESES. (Not suggest using it since it can change due to retrieval iteration)
  *   `numAlternativeNamesFromInterpretation` (*type:* `number()`, *default:* `nil`) - Number of alternate contact names from interpretation. (Not suggest using it since it can change due to retrieval iteration)
  *   `numCandidates` (*type:* `number()`, *default:* `nil`) - Number of contacts populated by the contact Grounding Provider. (Not suggest using it since it can change due to retrieval iteration)
  *   `recognitionAlternateSource` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :conceptId => String.t() | nil,
          :contactSource => String.t() | nil,
          :isRelationshipFromAnnotation => boolean() | nil,
          :isRelationshipFromSource => boolean() | nil,
          :isSingleCandidate => boolean() | nil,
          :isStarred => boolean() | nil,
          :matchedNameType => String.t() | nil,
          :numAlternateNameFromFuzzyContactMatch => number() | nil,
          :numAlternateNamesFromS3 => number() | nil,
          :numAlternativeNamesFromInterpretation => number() | nil,
          :numCandidates => number() | nil,
          :recognitionAlternateSource => String.t() | nil
        }

  field(:conceptId)
  field(:contactSource)
  field(:isRelationshipFromAnnotation)
  field(:isRelationshipFromSource)
  field(:isSingleCandidate)
  field(:isStarred)
  field(:matchedNameType)
  field(:numAlternateNameFromFuzzyContactMatch)
  field(:numAlternateNamesFromS3)
  field(:numAlternativeNamesFromInterpretation)
  field(:numCandidates)
  field(:recognitionAlternateSource)
end

defimpl Poison.Decoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.AssistantGroundingRankerContactGroundingProviderFeatures do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantGroundingRankerContactGroundingProviderFeatures.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for:
    GoogleApi.ContentWarehouse.V1.Model.AssistantGroundingRankerContactGroundingProviderFeatures do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
