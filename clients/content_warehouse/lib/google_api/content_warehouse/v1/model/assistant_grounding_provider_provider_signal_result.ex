# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantGroundingProviderProviderSignalResult do
  @moduledoc """
  Message containing the processed provider signals. This message is consumed by systems outside of the Provider GP, such as the HGR. For use of provider signals within the Provider GP, please refer to the CTF-governed PackedProviderSignals defined in: cs/google3/assistant/context/proto/packed_provider_signals.proto;rcl=486224300;l=68

  ## Attributes

  *   `isDefaultProvider` (*type:* `boolean()`, *default:* `nil`) - Whether the provider is the default provider for the BII and entity type. Also known as the 'preferred_provider'.
  *   `isForegroundProvider` (*type:* `boolean()`, *default:* `nil`) - Whether the provider is currently open in the foreground on the device.
  *   `isInAppProvider` (*type:* `boolean()`, *default:* `nil`) - Indicates that fulfillment on this provider will happen within the provider app
  *   `isInstalled` (*type:* `boolean()`, *default:* `nil`) - Whether the provider is installed, or otherwise reachable, from the device.
  *   `isLastUsedProvider` (*type:* `boolean()`, *default:* `nil`) - Whether the provider was the last-used provider for this intent on the device. Also known as the 'sticky_provider'.
  *   `isQueryRestrictedProvider` (*type:* `boolean()`, *default:* `nil`) - Whether the provider was specified by the query.
  *   `providerSelectionResult` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AssistantContextProviderSelectionResult.t`, *default:* `nil`) - The result of running provider-selection on the provider candidate. This is populated by the Signal Extractor after the PSL has been run.
  *   `providerTypeSignal` (*type:* `String.t`, *default:* `nil`) - Contains the "fulfillment type" of provider eg whether it's 0p or System API provider.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :isDefaultProvider => boolean() | nil,
          :isForegroundProvider => boolean() | nil,
          :isInAppProvider => boolean() | nil,
          :isInstalled => boolean() | nil,
          :isLastUsedProvider => boolean() | nil,
          :isQueryRestrictedProvider => boolean() | nil,
          :providerSelectionResult =>
            GoogleApi.ContentWarehouse.V1.Model.AssistantContextProviderSelectionResult.t() | nil,
          :providerTypeSignal => String.t() | nil
        }

  field(:isDefaultProvider)
  field(:isForegroundProvider)
  field(:isInAppProvider)
  field(:isInstalled)
  field(:isLastUsedProvider)
  field(:isQueryRestrictedProvider)

  field(:providerSelectionResult,
    as: GoogleApi.ContentWarehouse.V1.Model.AssistantContextProviderSelectionResult
  )

  field(:providerTypeSignal)
end

defimpl Poison.Decoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AssistantGroundingProviderProviderSignalResult do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantGroundingProviderProviderSignalResult.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContentWarehouse.V1.Model.AssistantGroundingProviderProviderSignalResult do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
