# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GeostoreGeopoliticalProto do
  @moduledoc """


  ## Attributes

  *   `conveysAttributionTo` (*type:* `String.t`, *default:* `nil`) - If present, some aspect of this feature (usually name or geometry) can signify ownership of the area by the region specified. The string, if present, will be a region code. E.g., suppose a TYPE_POSTAL_CODE feature has a Russian format in Crimea (which is disputed by Ukraine), then this field would be set to "RU".
  *   `regionSpecificName` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.GeostoreRegionSpecificNameProto.t)`, *default:* `nil`) - Any specific handling of this feature's name from different regions' POVs.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :conveysAttributionTo => String.t() | nil,
          :regionSpecificName =>
            list(GoogleApi.ContentWarehouse.V1.Model.GeostoreRegionSpecificNameProto.t()) | nil
        }

  field(:conveysAttributionTo)

  field(:regionSpecificName,
    as: GoogleApi.ContentWarehouse.V1.Model.GeostoreRegionSpecificNameProto,
    type: :list
  )
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.GeostoreGeopoliticalProto do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GeostoreGeopoliticalProto.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.GeostoreGeopoliticalProto do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
