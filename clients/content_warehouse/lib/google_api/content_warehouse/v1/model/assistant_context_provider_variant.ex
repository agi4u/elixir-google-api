# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AssistantContextProviderVariant do
  @moduledoc """
  Note: As of May 2021, multiple providers use the same mids (e.g. YouTube Main, YouTube Go, and YouTube Music all have the same mids). However, quite often we end up using surface specific identifiers (e.g. Android package names, iOS bundle identifiers, etc.) to differentiate amongst them. This field allows us to move away from surface specific identifiers towards a surface-agnostic enum representing the same information.

  ## Attributes

  *   `emptyMidVariant` (*type:* `String.t`, *default:* `nil`) - 
  *   `spotifyVariant` (*type:* `String.t`, *default:* `nil`) - 
  *   `youtubeVariant` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :emptyMidVariant => String.t() | nil,
          :spotifyVariant => String.t() | nil,
          :youtubeVariant => String.t() | nil
        }

  field(:emptyMidVariant)
  field(:spotifyVariant)
  field(:youtubeVariant)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.AssistantContextProviderVariant do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AssistantContextProviderVariant.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.AssistantContextProviderVariant do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
