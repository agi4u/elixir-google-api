# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.GoodocSummaryStats do
  @moduledoc """
  Goodoc stats for a range of elements, such as one page or a whole book. These stats can be computed using the SummaryStatsCollector class. Some range stats are pre-computed and stored in goodocs/volumes (eg., Page.stats below, and Ocean's CA_VolumeResult.goodoc_stats).

  ## Attributes

  *   `numNonGraphicBlocks` (*type:* `integer()`, *default:* `nil`) - 
  *   `medianLineSpan` (*type:* `integer()`, *default:* `nil`) - top to next top in para
  *   `meanWordsPerLine` (*type:* `integer()`, *default:* `nil`) - 
  *   `meanSymbolsPerLine` (*type:* `integer()`, *default:* `nil`) - 
  *   `medianWidth` (*type:* `integer()`, *default:* `nil`) - 
  *   `numWords` (*type:* `integer()`, *default:* `nil`) - ------ Word stats
  *   `medianSymbolsPerLine` (*type:* `integer()`, *default:* `nil`) - 
  *   `medianPrintedBox` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox.t`, *default:* `nil`) - Each median*_printed_box excludes page header/footer and all graphic blocks
  *   `numSymbols` (*type:* `integer()`, *default:* `nil`) - ------ Symbol stats
  *   `numLineSpaces` (*type:* `integer()`, *default:* `nil`) - Lines (out of num_lines) that have a successor line within their para
  *   `numBlockSpaces` (*type:* `integer()`, *default:* `nil`) - blocks that have a successor block within their flow on their page
  *   `numParagraphSpaces` (*type:* `integer()`, *default:* `nil`) - paras that have a successor para within their block
  *   `medianSymbolsPerWord` (*type:* `integer()`, *default:* `nil`) - 
  *   `medianHorizontalDpi` (*type:* `integer()`, *default:* `nil`) - 
  *   `meanSymbolsPerParagraph` (*type:* `integer()`, *default:* `nil`) - 
  *   `medianFullPrintedBox` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox.t`, *default:* `nil`) - Each median_full*_printed_box includes page header/footer but still excludes all graphic blocks
  *   `numLines` (*type:* `integer()`, *default:* `nil`) - ------ Line stats "top" corresponds to the highest ascender and "bottom" to the lowest descender.
  *   `medianBlockSpace` (*type:* `integer()`, *default:* `nil`) - bottom to next top in flow on page
  *   `medianFullOddPrintedBox` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox.t`, *default:* `nil`) - 
  *   `medianParagraphSpace` (*type:* `integer()`, *default:* `nil`) - bottom to next top in block
  *   `meanSymbolsPerBlock` (*type:* `integer()`, *default:* `nil`) - 
  *   `medianWordsPerLine` (*type:* `integer()`, *default:* `nil`) - 
  *   `medianLineHeight` (*type:* `integer()`, *default:* `nil`) - top to bottom
  *   `medianHeight` (*type:* `integer()`, *default:* `nil`) - 
  *   `medianSymbolsPerBlock` (*type:* `integer()`, *default:* `nil`) - 
  *   `medianSymbolsPerParagraph` (*type:* `integer()`, *default:* `nil`) - 
  *   `medianWordsPerBlock` (*type:* `integer()`, *default:* `nil`) - 
  *   `medianLineSpace` (*type:* `integer()`, *default:* `nil`) - bottom to next top in para
  *   `fontSizeHistogram` (*type:* `list(GoogleApi.ContentWarehouse.V1.Model.GoodocFontSizeStats.t)`, *default:* `nil`) - Symbol counts (and other attributes) for each distinct CharLabel.FontId and FontSize; histogram is in decreasing order of symbol count
  *   `medianFullEvenPrintedBox` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox.t`, *default:* `nil`) - 
  *   `numParagraphs` (*type:* `integer()`, *default:* `nil`) - ------ Paragraph stats Median symbols and words omit junk, header and footer blocks; they are intended to be a measure of the typical "content" paragraph. There can still be substantial differences between means and medians, particularly if a table is present (every cell is a paragraph).
  *   `meanWordsPerBlock` (*type:* `integer()`, *default:* `nil`) - 
  *   `numBlocks` (*type:* `integer()`, *default:* `nil`) - ------ Block stats Median symbols and words omit junk, header and footer blocks; they are intended to be a measure of the typical "content" block. There can still be substantial differences between means and medians; however, block values will generally exceed paragraph values (not the case when headers and footers are included).
  *   `medianWordsPerParagraph` (*type:* `integer()`, *default:* `nil`) - 
  *   `medianParagraphIndent` (*type:* `integer()`, *default:* `nil`) - leading space on first line
  *   `medianOddPrintedBox` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox.t`, *default:* `nil`) - 1,3,5..
  *   `medianVerticalDpi` (*type:* `integer()`, *default:* `nil`) - 
  *   `estimatedFontSizes` (*type:* `boolean()`, *default:* `nil`) - This flag is set if the histogram above has been derived by estimating font sizes from CharLabel.CharacterHeight; that happens if the FontSize field is constant, as has happened with Abbyy 9.
  *   `medianEvenPrintedBox` (*type:* `GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox.t`, *default:* `nil`) - 0,2,4..
  *   `meanSymbolsPerWord` (*type:* `integer()`, *default:* `nil`) - 
  *   `meanWordsPerParagraph` (*type:* `integer()`, *default:* `nil`) - 
  *   `numPages` (*type:* `integer()`, *default:* `nil`) - ------ Page stats.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :numNonGraphicBlocks => integer() | nil,
          :medianLineSpan => integer() | nil,
          :meanWordsPerLine => integer() | nil,
          :meanSymbolsPerLine => integer() | nil,
          :medianWidth => integer() | nil,
          :numWords => integer() | nil,
          :medianSymbolsPerLine => integer() | nil,
          :medianPrintedBox => GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox.t() | nil,
          :numSymbols => integer() | nil,
          :numLineSpaces => integer() | nil,
          :numBlockSpaces => integer() | nil,
          :numParagraphSpaces => integer() | nil,
          :medianSymbolsPerWord => integer() | nil,
          :medianHorizontalDpi => integer() | nil,
          :meanSymbolsPerParagraph => integer() | nil,
          :medianFullPrintedBox =>
            GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox.t() | nil,
          :numLines => integer() | nil,
          :medianBlockSpace => integer() | nil,
          :medianFullOddPrintedBox =>
            GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox.t() | nil,
          :medianParagraphSpace => integer() | nil,
          :meanSymbolsPerBlock => integer() | nil,
          :medianWordsPerLine => integer() | nil,
          :medianLineHeight => integer() | nil,
          :medianHeight => integer() | nil,
          :medianSymbolsPerBlock => integer() | nil,
          :medianSymbolsPerParagraph => integer() | nil,
          :medianWordsPerBlock => integer() | nil,
          :medianLineSpace => integer() | nil,
          :fontSizeHistogram =>
            list(GoogleApi.ContentWarehouse.V1.Model.GoodocFontSizeStats.t()) | nil,
          :medianFullEvenPrintedBox =>
            GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox.t() | nil,
          :numParagraphs => integer() | nil,
          :meanWordsPerBlock => integer() | nil,
          :numBlocks => integer() | nil,
          :medianWordsPerParagraph => integer() | nil,
          :medianParagraphIndent => integer() | nil,
          :medianOddPrintedBox => GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox.t() | nil,
          :medianVerticalDpi => integer() | nil,
          :estimatedFontSizes => boolean() | nil,
          :medianEvenPrintedBox =>
            GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox.t() | nil,
          :meanSymbolsPerWord => integer() | nil,
          :meanWordsPerParagraph => integer() | nil,
          :numPages => integer() | nil
        }

  field(:numNonGraphicBlocks)
  field(:medianLineSpan)
  field(:meanWordsPerLine)
  field(:meanSymbolsPerLine)
  field(:medianWidth)
  field(:numWords)
  field(:medianSymbolsPerLine)
  field(:medianPrintedBox, as: GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox)
  field(:numSymbols)
  field(:numLineSpaces)
  field(:numBlockSpaces)
  field(:numParagraphSpaces)
  field(:medianSymbolsPerWord)
  field(:medianHorizontalDpi)
  field(:meanSymbolsPerParagraph)
  field(:medianFullPrintedBox, as: GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox)
  field(:numLines)
  field(:medianBlockSpace)
  field(:medianFullOddPrintedBox, as: GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox)
  field(:medianParagraphSpace)
  field(:meanSymbolsPerBlock)
  field(:medianWordsPerLine)
  field(:medianLineHeight)
  field(:medianHeight)
  field(:medianSymbolsPerBlock)
  field(:medianSymbolsPerParagraph)
  field(:medianWordsPerBlock)
  field(:medianLineSpace)

  field(:fontSizeHistogram,
    as: GoogleApi.ContentWarehouse.V1.Model.GoodocFontSizeStats,
    type: :list
  )

  field(:medianFullEvenPrintedBox, as: GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox)
  field(:numParagraphs)
  field(:meanWordsPerBlock)
  field(:numBlocks)
  field(:medianWordsPerParagraph)
  field(:medianParagraphIndent)
  field(:medianOddPrintedBox, as: GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox)
  field(:medianVerticalDpi)
  field(:estimatedFontSizes)
  field(:medianEvenPrintedBox, as: GoogleApi.ContentWarehouse.V1.Model.GoodocBoundingBox)
  field(:meanSymbolsPerWord)
  field(:meanWordsPerParagraph)
  field(:numPages)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.GoodocSummaryStats do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.GoodocSummaryStats.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.GoodocSummaryStats do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
