# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContentWarehouse.V1.Model.AnchorsAnchor do
  @moduledoc """


  ## Attributes

  *   `creationDate` (*type:* `integer()`, *default:* `nil`) - used for history - the first and last time we have seen this anchor. creation_date also used for Freshdocs Twitter indexing, a retweet is an anchor of the original tweet. This field records the time when a retweet is created.
  *   `isLocal` (*type:* `boolean()`, *default:* `nil`) - The bit ~roughly~ indicates whether an anchor's source and target pages are on the same domain. Note: this plays no role in determining whether an anchor is onsite, ondomain, or offdomain in mustang (i.e., the bit above).
  *   `fullRightContext` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `firstseenDate` (*type:* `integer()`, *default:* `nil`) - # days past Dec 31, 1994, 23:00:00 UTC (Unix time @788914800) that this link was first seen. Should never occupy more than 15 bits. NOTE: this is NOT the same as creation_date; firstseen_date is filled during link extraction
  *   `fontsize` (*type:* `integer()`, *default:* `nil`) - 
  *   `linkAdditionalInfo` (*type:* `GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet.t`, *default:* `nil`) - Additional information related to the anchor, such as additional anchor text or scores.
  *   `catfishTags` (*type:* `list(integer())`, *default:* `nil`) - CATfish tags attached to a link. These are similar to link tags, except the values are created on the fly within Cookbook. See: http://sites/cookbook/exporting/indexing
  *   `origText` (*type:* `String.t`, *default:* `nil`) - Original text, including capitalization and punctuation. Runs of whitespace are collapsed into a single space.
  *   `fullLeftContext` (*type:* `list(String.t)`, *default:* `nil`) - The full context. These are not written out in the linklogs.
  *   `demotionreason` (*type:* `integer()`, *default:* `nil`) - DEPRECATED
  *   `context` (*type:* `integer()`, *default:* `nil`) - 
  *   `linkTags` (*type:* `list(integer())`, *default:* `nil`) - Contains info on link type, source page, etc.
  *   `firstseenNearCreation` (*type:* `boolean()`, *default:* `nil`) - true if we think 'firstseen_date' is an accurate estimate of when the link was actually added to the source page. false if it may have existed for some time before we saw it.
  *   `deleted` (*type:* `boolean()`, *default:* `nil`) - 
  *   `forwardingTypes` (*type:* `integer()`, *default:* `nil`) - How the anchor is forwarded to the canonical, available only for forwarded anchors (i.e., the field is set). The forwarding types are defined in URLForwardingUtil (segindexer/segment-indexer-util.h). Always use URLForwardingUtil to access this field and use URLForwardingUtil::GetAnchorForwardingReason to get the explanation how the anchor is forwarded to the canonical. NOTE: Use with caution as it is only set for docjoins generated using the urlmap from repository/updater.
  *   `possiblyOldFirstseenDate` (*type:* `boolean()`, *default:* `nil`) - DEPRECATED. It used to be set if firstseen_date is not set. It's to indicate that the anchor is possibly old, but we don't have enough information to tell until the linkage map is updated. TODO(hxu) rename it to possibly_old_firstseen_date_DEPRECATED after clean up other dependencies.
  *   `context2` (*type:* `integer()`, *default:* `nil`) - This is a hash of terms near the anchor. (This is a second-generation hash replacing the value stored in the 'context' field.)
  *   `deletionDate` (*type:* `integer()`, *default:* `nil`) - 
  *   `fragment` (*type:* `String.t`, *default:* `nil`) - The URL fragment for this anchor (the foo in http://www.google.com#foo)
  *   `targetUrlEncoding` (*type:* `integer()`, *default:* `nil`) - A given target URL may be found in different encodings in different documents. We store the URL encoding with each source anchor so that we can count them later to find the encoding most likely to be expected by the Web site. Around 0.7% of target URLs are expected to require a non-default value here. The default value 0 is referenced in C++ as webutil::kDefaultUrlEncoding. See also webutil/urlencoding.
  *   `originalTargetDocid` (*type:* `String.t`, *default:* `nil`) - The docid of the anchor's original target. This field is available if and only if the anchor is forwarded.
  *   `encodedNewsAnchorData` (*type:* `integer()`, *default:* `nil`) - Encoded data containing information about newsiness of anchor. Populated only if anchor is classified as coming from a newsy, high quality site. Encoded data for anchor sources are being stored in googledata/quality/freshness/news_anchors/encoded_news_anchors_data.txt Scores are being computed with quality/freshness/news_anchors/ routines.
  *   `compressedImageUrls` (*type:* `list(String.t)`, *default:* `nil`) - If the anchor contained images, these image urls are stored here in compressed form.
  *   `compressedOriginalTargetUrl` (*type:* `String.t`, *default:* `nil`) - The anchor's original target url, compressed. Available only in Alexandria docjoins when the anchor is forwarded.
  *   `experimental` (*type:* `boolean()`, *default:* `nil`) - If true, the anchor is for experimental purposes and should not be used in serving.
  *   `timestamp` (*type:* `String.t`, *default:* `nil`) - This field is DEPRECATED and no longer filled. For source page crawl timestamp, use Source.crawl_timestamp. Next tag id should be 62.
  *   `parallelLinks` (*type:* `integer()`, *default:* `nil`) - The number of additional links from the same source page to the same target domain. Not populated if is_local is true.
  *   `expired` (*type:* `boolean()`, *default:* `nil`) - true iff exp domain
  *   `offset` (*type:* `integer()`, *default:* `nil`) - This is the offset for the first term in the anchor - it can be used as a unique ID for the anchor within the document and compared against all per-tag data. This is measured in bytes from the start of the document. We write this out to the linklogs to recover the original order of links after source/target forwarding. This is necessary for computing the global related data.
  *   `text` (*type:* `String.t`, *default:* `nil`) - Space-delimited anchor words. Text that needs segmentation (like CJK or Thai) is unsegmented, since we set FLAGS_segment_during_lexing to false in mr-linkextractor.cc .
  *   `weight` (*type:* `integer()`, *default:* `nil`) - weights are 0-127
  *   `locality` (*type:* `integer()`, *default:* `nil`) - For ranking purposes, the quality of an anchor is measured by its "locality" and "bucket". See quality/anchors/definitions.h for more information.
  *   `type` (*type:* `integer()`, *default:* `nil`) - DEPRECATED: Now in link_tags
  *   `lastUpdateTimestamp` (*type:* `integer()`, *default:* `nil`) - Used for history and freshness tracking - the timestamp this anchor is updated in indexing.
  *   `bucket` (*type:* `integer()`, *default:* `nil`) - 
  *   `setiPagerankWeight` (*type:* `number()`, *default:* `nil`) - TEMPORARY
  *   `sourceType` (*type:* `integer()`, *default:* `nil`) -  is to record the quality of the anchor's source page and is correlated with but not identical to the index tier of the source page. In the docjoins built by the indexing pipeline (Alexandria), - Anchors marked TYPE_HIGH_QUALITY are from base documents. - Anchors marked TYPE_MEDIUM_QUALITY are from documents of medium quality (roughly but not exactly supplemental tier documents). - Anchors marked TYPE_LOW_QUALITY are from documents of low quality (roughly but not exactly blackhole documents). Note that the source_type can also be used as an importance indicator of an anchor (a lower source_type value indicates a more important anchor), so it is important to enforce that TYPE_HIGH_QUALITY < TYPE_MEDIUM_QUALITY < TYPE_LOW_QUALITY To add a new source type in future, please maintain the proper relationship among the types as well. TYPE_FRESHDOCS, only available in freshdocs indexing, is a special case and is considered the same type as TYPE_HIGH_QUALITY for the purpose of anchor importance in duplicate anchor removal.
  *   `pagerankWeight` (*type:* `number()`, *default:* `nil`) - Weight to be stored in linkmaps for pageranker
  *   `source` (*type:* `GoogleApi.ContentWarehouse.V1.Model.AnchorsAnchorSource.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :creationDate => integer() | nil,
          :isLocal => boolean() | nil,
          :fullRightContext => list(String.t()) | nil,
          :firstseenDate => integer() | nil,
          :fontsize => integer() | nil,
          :linkAdditionalInfo =>
            GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet.t() | nil,
          :catfishTags => list(integer()) | nil,
          :origText => String.t() | nil,
          :fullLeftContext => list(String.t()) | nil,
          :demotionreason => integer() | nil,
          :context => integer() | nil,
          :linkTags => list(integer()) | nil,
          :firstseenNearCreation => boolean() | nil,
          :deleted => boolean() | nil,
          :forwardingTypes => integer() | nil,
          :possiblyOldFirstseenDate => boolean() | nil,
          :context2 => integer() | nil,
          :deletionDate => integer() | nil,
          :fragment => String.t() | nil,
          :targetUrlEncoding => integer() | nil,
          :originalTargetDocid => String.t() | nil,
          :encodedNewsAnchorData => integer() | nil,
          :compressedImageUrls => list(String.t()) | nil,
          :compressedOriginalTargetUrl => String.t() | nil,
          :experimental => boolean() | nil,
          :timestamp => String.t() | nil,
          :parallelLinks => integer() | nil,
          :expired => boolean() | nil,
          :offset => integer() | nil,
          :text => String.t() | nil,
          :weight => integer() | nil,
          :locality => integer() | nil,
          :type => integer() | nil,
          :lastUpdateTimestamp => integer() | nil,
          :bucket => integer() | nil,
          :setiPagerankWeight => number() | nil,
          :sourceType => integer() | nil,
          :pagerankWeight => number() | nil,
          :source => GoogleApi.ContentWarehouse.V1.Model.AnchorsAnchorSource.t() | nil
        }

  field(:creationDate)
  field(:isLocal)
  field(:fullRightContext, type: :list)
  field(:firstseenDate)
  field(:fontsize)
  field(:linkAdditionalInfo, as: GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet)
  field(:catfishTags, type: :list)
  field(:origText)
  field(:fullLeftContext, type: :list)
  field(:demotionreason)
  field(:context)
  field(:linkTags, type: :list)
  field(:firstseenNearCreation)
  field(:deleted)
  field(:forwardingTypes)
  field(:possiblyOldFirstseenDate)
  field(:context2)
  field(:deletionDate)
  field(:fragment)
  field(:targetUrlEncoding)
  field(:originalTargetDocid)
  field(:encodedNewsAnchorData)
  field(:compressedImageUrls, type: :list)
  field(:compressedOriginalTargetUrl)
  field(:experimental)
  field(:timestamp)
  field(:parallelLinks)
  field(:expired)
  field(:offset)
  field(:text)
  field(:weight)
  field(:locality)
  field(:type)
  field(:lastUpdateTimestamp)
  field(:bucket)
  field(:setiPagerankWeight)
  field(:sourceType)
  field(:pagerankWeight)
  field(:source, as: GoogleApi.ContentWarehouse.V1.Model.AnchorsAnchorSource)
end

defimpl Poison.Decoder, for: GoogleApi.ContentWarehouse.V1.Model.AnchorsAnchor do
  def decode(value, options) do
    GoogleApi.ContentWarehouse.V1.Model.AnchorsAnchor.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContentWarehouse.V1.Model.AnchorsAnchor do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
