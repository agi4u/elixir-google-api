# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.AndroidPublisher.V3.Model.DeviceTier do
  @moduledoc """
  A single device tier. Devices matching any of the device groups in device_group_names are considered to match the tier.

  ## Attributes

  *   `deviceGroupNames` (*type:* `list(String.t)`, *default:* `nil`) - Groups of devices included in this tier. These groups must be defined explicitly under device_groups in this configuration.
  *   `level` (*type:* `integer()`, *default:* `nil`) - The priority level of the tier. Tiers are evaluated in descending order of level: the highest level tier has the highest priority. The highest tier matching a given device is selected for that device. You should use a contiguous range of levels for your tiers in a tier set; tier levels in a tier set must be unique. For instance, if your tier set has 4 tiers (including the global fallback), you should define tiers 1, 2 and 3 in this configuration. Note: tier 0 is implicitly defined as a global fallback and selected for devices that don't match any of the tiers explicitly defined here. You mustn't define level 0 explicitly in this configuration.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :deviceGroupNames => list(String.t()) | nil,
          :level => integer() | nil
        }

  field(:deviceGroupNames, type: :list)
  field(:level)
end

defimpl Poison.Decoder, for: GoogleApi.AndroidPublisher.V3.Model.DeviceTier do
  def decode(value, options) do
    GoogleApi.AndroidPublisher.V3.Model.DeviceTier.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.AndroidPublisher.V3.Model.DeviceTier do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
