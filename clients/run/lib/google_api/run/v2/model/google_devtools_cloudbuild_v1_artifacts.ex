# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1Artifacts do
  @moduledoc """
  Artifacts produced by a build that should be uploaded upon successful completion of all build steps.

  ## Attributes

  *   `images` (*type:* `list(String.t)`, *default:* `nil`) - A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
  *   `mavenArtifacts` (*type:* `list(GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1MavenArtifact.t)`, *default:* `nil`) - A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
  *   `npmPackages` (*type:* `list(GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1NpmPackage.t)`, *default:* `nil`) - A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.
  *   `objects` (*type:* `GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1ArtifactObjects.t`, *default:* `nil`) - A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
  *   `pythonPackages` (*type:* `list(GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1PythonPackage.t)`, *default:* `nil`) - A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :images => list(String.t()) | nil,
          :mavenArtifacts =>
            list(GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1MavenArtifact.t()) | nil,
          :npmPackages =>
            list(GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1NpmPackage.t()) | nil,
          :objects => GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1ArtifactObjects.t() | nil,
          :pythonPackages =>
            list(GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1PythonPackage.t()) | nil
        }

  field(:images, type: :list)

  field(:mavenArtifacts,
    as: GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1MavenArtifact,
    type: :list
  )

  field(:npmPackages, as: GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1NpmPackage, type: :list)

  field(:objects, as: GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1ArtifactObjects)

  field(:pythonPackages,
    as: GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1PythonPackage,
    type: :list
  )
end

defimpl Poison.Decoder, for: GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1Artifacts do
  def decode(value, options) do
    GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1Artifacts.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Run.V2.Model.GoogleDevtoolsCloudbuildV1Artifacts do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
