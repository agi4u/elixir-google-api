# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Run.V1.Model.CSIVolumeSource do
  @moduledoc """
  Storage volume source using the Container Storage Interface.

  ## Attributes

  *   `driver` (*type:* `String.t`, *default:* `nil`) - name of the CSI driver for the requested storage system. Cloud Run supports the following drivers: * gcsfuse.run.googleapis.com : Mount a Cloud Storage Bucket as a volume.
  *   `readOnly` (*type:* `boolean()`, *default:* `nil`) - If true, mount the volume as read only. Defaults to false.
  *   `volumeAttributes` (*type:* `map()`, *default:* `nil`) - stores driver specific attributes. For Google Cloud Storage volumes, the following attributes are supported: * bucketName: the name of the Cloud Storage bucket to mount. The Cloud Run Service identity must have access to this bucket.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :driver => String.t() | nil,
          :readOnly => boolean() | nil,
          :volumeAttributes => map() | nil
        }

  field(:driver)
  field(:readOnly)
  field(:volumeAttributes, type: :map)
end

defimpl Poison.Decoder, for: GoogleApi.Run.V1.Model.CSIVolumeSource do
  def decode(value, options) do
    GoogleApi.Run.V1.Model.CSIVolumeSource.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Run.V1.Model.CSIVolumeSource do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
