# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudBuild.V2.Model.PipelineTask do
  @moduledoc """
  PipelineTask defines a task in a Pipeline.

  ## Attributes

  *   `name` (*type:* `String.t`, *default:* `nil`) - Name of the task.
  *   `params` (*type:* `list(GoogleApi.CloudBuild.V2.Model.Param.t)`, *default:* `nil`) - Params is a list of parameter names and values.
  *   `retries` (*type:* `integer()`, *default:* `nil`) - Retries represents how many times this task should be retried in case of task failure.
  *   `runAfter` (*type:* `list(String.t)`, *default:* `nil`) - RunAfter is the list of PipelineTask names that should be executed before this Task executes. (Used to force a specific ordering in graph execution.)
  *   `taskRef` (*type:* `GoogleApi.CloudBuild.V2.Model.TaskRef.t`, *default:* `nil`) - Reference to a specific instance of a task.
  *   `taskSpec` (*type:* `GoogleApi.CloudBuild.V2.Model.EmbeddedTask.t`, *default:* `nil`) - Spec to instantiate this TaskRun.
  *   `timeout` (*type:* `String.t`, *default:* `nil`) - Time after which the TaskRun times out. Defaults to 1 hour. Specified TaskRun timeout should be less than 24h.
  *   `whenExpressions` (*type:* `list(GoogleApi.CloudBuild.V2.Model.WhenExpression.t)`, *default:* `nil`) - Conditions that need to be true for the task to run.
  *   `workspaces` (*type:* `list(GoogleApi.CloudBuild.V2.Model.WorkspacePipelineTaskBinding.t)`, *default:* `nil`) - Workspaces maps workspaces from the pipeline spec to the workspaces declared in the Task.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :name => String.t() | nil,
          :params => list(GoogleApi.CloudBuild.V2.Model.Param.t()) | nil,
          :retries => integer() | nil,
          :runAfter => list(String.t()) | nil,
          :taskRef => GoogleApi.CloudBuild.V2.Model.TaskRef.t() | nil,
          :taskSpec => GoogleApi.CloudBuild.V2.Model.EmbeddedTask.t() | nil,
          :timeout => String.t() | nil,
          :whenExpressions => list(GoogleApi.CloudBuild.V2.Model.WhenExpression.t()) | nil,
          :workspaces =>
            list(GoogleApi.CloudBuild.V2.Model.WorkspacePipelineTaskBinding.t()) | nil
        }

  field(:name)
  field(:params, as: GoogleApi.CloudBuild.V2.Model.Param, type: :list)
  field(:retries)
  field(:runAfter, type: :list)
  field(:taskRef, as: GoogleApi.CloudBuild.V2.Model.TaskRef)
  field(:taskSpec, as: GoogleApi.CloudBuild.V2.Model.EmbeddedTask)
  field(:timeout)
  field(:whenExpressions, as: GoogleApi.CloudBuild.V2.Model.WhenExpression, type: :list)
  field(:workspaces, as: GoogleApi.CloudBuild.V2.Model.WorkspacePipelineTaskBinding, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.CloudBuild.V2.Model.PipelineTask do
  def decode(value, options) do
    GoogleApi.CloudBuild.V2.Model.PipelineTask.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudBuild.V2.Model.PipelineTask do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
