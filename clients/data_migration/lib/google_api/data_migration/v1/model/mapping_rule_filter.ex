# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DataMigration.V1.Model.MappingRuleFilter do
  @moduledoc """
  A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.

  ## Attributes

  *   `entities` (*type:* `list(String.t)`, *default:* `nil`) - Optional. The rule should be applied to specific entities defined by their fully qualified names.
  *   `entityNameContains` (*type:* `String.t`, *default:* `nil`) - Optional. The rule should be applied to entities whose non-qualified name contains the given string.
  *   `entityNamePrefix` (*type:* `String.t`, *default:* `nil`) - Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.
  *   `entityNameSuffix` (*type:* `String.t`, *default:* `nil`) - Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.
  *   `parentEntity` (*type:* `String.t`, *default:* `nil`) - Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :entities => list(String.t()) | nil,
          :entityNameContains => String.t() | nil,
          :entityNamePrefix => String.t() | nil,
          :entityNameSuffix => String.t() | nil,
          :parentEntity => String.t() | nil
        }

  field(:entities, type: :list)
  field(:entityNameContains)
  field(:entityNamePrefix)
  field(:entityNameSuffix)
  field(:parentEntity)
end

defimpl Poison.Decoder, for: GoogleApi.DataMigration.V1.Model.MappingRuleFilter do
  def decode(value, options) do
    GoogleApi.DataMigration.V1.Model.MappingRuleFilter.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DataMigration.V1.Model.MappingRuleFilter do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
