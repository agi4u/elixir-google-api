# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DataMigration.V1.Model.MultiEntityRename do
  @moduledoc """
  Options to configure rule type MultiEntityRename. The rule is used to rename multiple entities. The rule filter field can refer to one or more entities. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT

  ## Attributes

  *   `newNamePattern` (*type:* `String.t`, *default:* `nil`) - Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'
  *   `sourceNameTransformation` (*type:* `String.t`, *default:* `nil`) - Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :newNamePattern => String.t() | nil,
          :sourceNameTransformation => String.t() | nil
        }

  field(:newNamePattern)
  field(:sourceNameTransformation)
end

defimpl Poison.Decoder, for: GoogleApi.DataMigration.V1.Model.MultiEntityRename do
  def decode(value, options) do
    GoogleApi.DataMigration.V1.Model.MultiEntityRename.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DataMigration.V1.Model.MultiEntityRename do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
