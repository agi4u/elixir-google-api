# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Sheets.V4.Model.PivotFilterSpec do
  @moduledoc """
  The pivot table filter criteria associated with a specific source column offset.

  ## Attributes

  *   `columnOffsetIndex` (*type:* `integer()`, *default:* `nil`) - The zero-based column offset of the source range.
  *   `dataSourceColumnReference` (*type:* `GoogleApi.Sheets.V4.Model.DataSourceColumnReference.t`, *default:* `nil`) - The reference to the data source column.
  *   `filterCriteria` (*type:* `GoogleApi.Sheets.V4.Model.PivotFilterCriteria.t`, *default:* `nil`) - The criteria for the column.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :columnOffsetIndex => integer() | nil,
          :dataSourceColumnReference =>
            GoogleApi.Sheets.V4.Model.DataSourceColumnReference.t() | nil,
          :filterCriteria => GoogleApi.Sheets.V4.Model.PivotFilterCriteria.t() | nil
        }

  field(:columnOffsetIndex)
  field(:dataSourceColumnReference, as: GoogleApi.Sheets.V4.Model.DataSourceColumnReference)
  field(:filterCriteria, as: GoogleApi.Sheets.V4.Model.PivotFilterCriteria)
end

defimpl Poison.Decoder, for: GoogleApi.Sheets.V4.Model.PivotFilterSpec do
  def decode(value, options) do
    GoogleApi.Sheets.V4.Model.PivotFilterSpec.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Sheets.V4.Model.PivotFilterSpec do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
