# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dataproc.V1.Model.KubernetesSoftwareConfig do
  @moduledoc """
  The software configuration for this Dataproc cluster running on Kubernetes.

  ## Attributes

  *   `componentVersion` (*type:* `map()`, *default:* `nil`) - The components that should be installed in this Dataproc cluster. The key must be a string from the KubernetesComponent enumeration. The value is the version of the software to be installed. At least one entry must be specified.
  *   `properties` (*type:* `map()`, *default:* `nil`) - The properties to set on daemon config files.Property keys are specified in prefix:property format, for example spark:spark.kubernetes.container.image. The following are supported prefixes and their mappings: spark: spark-defaults.confFor more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :componentVersion => map() | nil,
          :properties => map() | nil
        }

  field(:componentVersion, type: :map)
  field(:properties, type: :map)
end

defimpl Poison.Decoder, for: GoogleApi.Dataproc.V1.Model.KubernetesSoftwareConfig do
  def decode(value, options) do
    GoogleApi.Dataproc.V1.Model.KubernetesSoftwareConfig.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataproc.V1.Model.KubernetesSoftwareConfig do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
