# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Notebooks.V2.Model.DataDisk do
  @moduledoc """
  An instance-attached disk resource.

  ## Attributes

  *   `diskEncryption` (*type:* `String.t`, *default:* `nil`) - Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
  *   `diskSizeGb` (*type:* `String.t`, *default:* `nil`) - Optional. The size of the disk in GB attached to this VM instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to 100.
  *   `diskType` (*type:* `String.t`, *default:* `nil`) - Optional. Input only. Indicates the type of the disk.
  *   `kmsKey` (*type:* `String.t`, *default:* `nil`) - Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :diskEncryption => String.t() | nil,
          :diskSizeGb => String.t() | nil,
          :diskType => String.t() | nil,
          :kmsKey => String.t() | nil
        }

  field(:diskEncryption)
  field(:diskSizeGb)
  field(:diskType)
  field(:kmsKey)
end

defimpl Poison.Decoder, for: GoogleApi.Notebooks.V2.Model.DataDisk do
  def decode(value, options) do
    GoogleApi.Notebooks.V2.Model.DataDisk.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Notebooks.V2.Model.DataDisk do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
