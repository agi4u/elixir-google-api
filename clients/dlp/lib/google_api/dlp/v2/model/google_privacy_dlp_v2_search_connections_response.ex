# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2SearchConnectionsResponse do
  @moduledoc """
  Response message for SearchConnections.

  ## Attributes

  *   `connections` (*type:* `list(GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Connection.t)`, *default:* `nil`) - List of connections that match the search query. Note that only a subset of the fields will be populated, and only "name" is guaranteed to be set. For full details of a Connection, call GetConnection with the name.
  *   `nextPageToken` (*type:* `String.t`, *default:* `nil`) - Token to retrieve the next page of results. An empty value means there are no more results.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :connections => list(GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Connection.t()) | nil,
          :nextPageToken => String.t() | nil
        }

  field(:connections, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Connection, type: :list)
  field(:nextPageToken)
end

defimpl Poison.Decoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2SearchConnectionsResponse do
  def decode(value, options) do
    GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2SearchConnectionsResponse.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2SearchConnectionsResponse do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
