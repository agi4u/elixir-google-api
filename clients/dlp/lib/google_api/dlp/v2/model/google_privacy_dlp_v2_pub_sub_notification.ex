# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2PubSubNotification do
  @moduledoc """
  Send a Pub/Sub message into the given Pub/Sub topic to connect other systems to data profile generation. The message payload data will be the byte serialization of `DataProfilePubSubMessage`.

  ## Attributes

  *   `detailOfMessage` (*type:* `String.t`, *default:* `nil`) - How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).
  *   `event` (*type:* `String.t`, *default:* `nil`) - The type of event that triggers a Pub/Sub. At most one `PubSubNotification` per EventType is permitted.
  *   `pubsubCondition` (*type:* `GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2DataProfilePubSubCondition.t`, *default:* `nil`) - Conditions (e.g., data risk or sensitivity level) for triggering a Pub/Sub.
  *   `topic` (*type:* `String.t`, *default:* `nil`) - Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :detailOfMessage => String.t() | nil,
          :event => String.t() | nil,
          :pubsubCondition =>
            GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2DataProfilePubSubCondition.t() | nil,
          :topic => String.t() | nil
        }

  field(:detailOfMessage)
  field(:event)
  field(:pubsubCondition, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2DataProfilePubSubCondition)
  field(:topic)
end

defimpl Poison.Decoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2PubSubNotification do
  def decode(value, options) do
    GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2PubSubNotification.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2PubSubNotification do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
