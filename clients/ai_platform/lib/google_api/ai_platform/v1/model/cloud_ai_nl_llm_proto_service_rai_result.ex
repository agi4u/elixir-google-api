# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceRaiResult do
  @moduledoc """
  The RAI results for a given text.

  ## Attributes

  *   `aidaRecitationResult` (*type:* `GoogleApi.AIPlatform.V1.Model.LanguageLabsAidaTrustRecitationProtoRecitationResult.t`, *default:* `nil`) - Recitation result from Aida recitation checker.
  *   `blocked` (*type:* `boolean()`, *default:* `nil`) - Use `triggered_blocklist`.
  *   `errorCodes` (*type:* `list(integer())`, *default:* `nil`) - The error codes indicate which RAI filters block the response.
  *   `filtered` (*type:* `boolean()`, *default:* `nil`) - Whether the text should be filtered and not shown to the end user. This is determined based on a combination of `triggered_recitation`, `triggered_blocklist`, `language_filter_result`, and `triggered_safety_filter`.
  *   `languageFilterResult` (*type:* `GoogleApi.AIPlatform.V1.Model.LearningGenaiRootLanguageFilterResult.t`, *default:* `nil`) - Language filter result from SAFT LangId.
  *   `raiSignals` (*type:* `list(GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceRaiSignal.t)`, *default:* `nil`) - The RAI signals for the text.
  *   `triggeredBlocklist` (*type:* `boolean()`, *default:* `nil`) - Whether the text triggered the blocklist.
  *   `triggeredRecitation` (*type:* `boolean()`, *default:* `nil`) - Whether the text should be blocked by the recitation result from Aida recitation checker. It is determined from aida_recitation_result.
  *   `triggeredSafetyFilter` (*type:* `boolean()`, *default:* `nil`) - Whether the text triggered the safety filter. Currently, this is due to CSAI triggering or one of four categories (derogatory, sexual, toxic, violent) having a score over the filter threshold.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :aidaRecitationResult =>
            GoogleApi.AIPlatform.V1.Model.LanguageLabsAidaTrustRecitationProtoRecitationResult.t()
            | nil,
          :blocked => boolean() | nil,
          :errorCodes => list(integer()) | nil,
          :filtered => boolean() | nil,
          :languageFilterResult =>
            GoogleApi.AIPlatform.V1.Model.LearningGenaiRootLanguageFilterResult.t() | nil,
          :raiSignals =>
            list(GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceRaiSignal.t()) | nil,
          :triggeredBlocklist => boolean() | nil,
          :triggeredRecitation => boolean() | nil,
          :triggeredSafetyFilter => boolean() | nil
        }

  field(:aidaRecitationResult,
    as: GoogleApi.AIPlatform.V1.Model.LanguageLabsAidaTrustRecitationProtoRecitationResult
  )

  field(:blocked)
  field(:errorCodes, type: :list)
  field(:filtered)

  field(:languageFilterResult,
    as: GoogleApi.AIPlatform.V1.Model.LearningGenaiRootLanguageFilterResult
  )

  field(:raiSignals,
    as: GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceRaiSignal,
    type: :list
  )

  field(:triggeredBlocklist)
  field(:triggeredRecitation)
  field(:triggeredSafetyFilter)
end

defimpl Poison.Decoder, for: GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceRaiResult do
  def decode(value, options) do
    GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceRaiResult.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceRaiResult do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
