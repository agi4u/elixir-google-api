# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceGenerateMultiModalResponse do
  @moduledoc """


  ## Attributes

  *   `candidates` (*type:* `list(GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceCandidate.t)`, *default:* `nil`) - Possible candidate responses to the conversation up until this point.
  *   `debugMetadata` (*type:* `GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceMessageMetadata.t`, *default:* `nil`) - Debug information containing message metadata. Clients should not consume this field, and this is only populated for Flow Runner path.
  *   `facts` (*type:* `list(GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceFact.t)`, *default:* `nil`) - External facts retrieved for factuality/grounding.
  *   `promptFeedback` (*type:* `GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServicePromptFeedback.t`, *default:* `nil`) - Content filter results for a prompt sent in the request. Note: Sent only in the first stream chunk. Only happens when no candidates were generated due to content violations.
  *   `reportingMetrics` (*type:* `GoogleApi.AIPlatform.V1.Model.IntelligenceCloudAutomlXpsReportingMetrics.t`, *default:* `nil`) - Billable prediction metrics.
  *   `usageMetadata` (*type:* `GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceUsageMetadata.t`, *default:* `nil`) - Usage metadata about the response(s).
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :candidates =>
            list(GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceCandidate.t()) | nil,
          :debugMetadata =>
            GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceMessageMetadata.t() | nil,
          :facts => list(GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceFact.t()) | nil,
          :promptFeedback =>
            GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServicePromptFeedback.t() | nil,
          :reportingMetrics =>
            GoogleApi.AIPlatform.V1.Model.IntelligenceCloudAutomlXpsReportingMetrics.t() | nil,
          :usageMetadata =>
            GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceUsageMetadata.t() | nil
        }

  field(:candidates,
    as: GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceCandidate,
    type: :list
  )

  field(:debugMetadata, as: GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceMessageMetadata)
  field(:facts, as: GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceFact, type: :list)
  field(:promptFeedback, as: GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServicePromptFeedback)

  field(:reportingMetrics,
    as: GoogleApi.AIPlatform.V1.Model.IntelligenceCloudAutomlXpsReportingMetrics
  )

  field(:usageMetadata, as: GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceUsageMetadata)
end

defimpl Poison.Decoder,
  for: GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceGenerateMultiModalResponse do
  def decode(value, options) do
    GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceGenerateMultiModalResponse.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.AIPlatform.V1.Model.CloudAiNlLlmProtoServiceGenerateMultiModalResponse do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
