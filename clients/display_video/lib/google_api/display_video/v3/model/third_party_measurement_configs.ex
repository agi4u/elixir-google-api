# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DisplayVideo.V3.Model.ThirdPartyMeasurementConfigs do
  @moduledoc """
  Settings that control what third-party vendors are measuring specific line item metrics.

  ## Attributes

  *   `brandLiftVendorConfigs` (*type:* `list(GoogleApi.DisplayVideo.V3.Model.ThirdPartyVendorConfig.t)`, *default:* `nil`) - Optional. The third-party vendors measuring brand lift. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_DYNATA` * `THIRD_PARTY_VENDOR_KANTAR`
  *   `brandSafetyVendorConfigs` (*type:* `list(GoogleApi.DisplayVideo.V3.Model.ThirdPartyVendorConfig.t)`, *default:* `nil`) - Optional. The third-party vendors measuring brand safety. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_ZERF` * `THIRD_PARTY_VENDOR_DOUBLE_VERIFY` * `THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE`
  *   `reachVendorConfigs` (*type:* `list(GoogleApi.DisplayVideo.V3.Model.ThirdPartyVendorConfig.t)`, *default:* `nil`) - Optional. The third-party vendors measuring reach. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_NIELSEN` * `THIRD_PARTY_VENDOR_COMSCORE` * `THIRD_PARTY_VENDOR_KANTAR`
  *   `viewabilityVendorConfigs` (*type:* `list(GoogleApi.DisplayVideo.V3.Model.ThirdPartyVendorConfig.t)`, *default:* `nil`) - Optional. The third-party vendors measuring viewability. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_MOAT` * `THIRD_PARTY_VENDOR_DOUBLE_VERIFY` * `THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE` * `THIRD_PARTY_VENDOR_COMSCORE` * `THIRD_PARTY_VENDOR_TELEMETRY` * `THIRD_PARTY_VENDOR_MEETRICS`
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :brandLiftVendorConfigs =>
            list(GoogleApi.DisplayVideo.V3.Model.ThirdPartyVendorConfig.t()) | nil,
          :brandSafetyVendorConfigs =>
            list(GoogleApi.DisplayVideo.V3.Model.ThirdPartyVendorConfig.t()) | nil,
          :reachVendorConfigs =>
            list(GoogleApi.DisplayVideo.V3.Model.ThirdPartyVendorConfig.t()) | nil,
          :viewabilityVendorConfigs =>
            list(GoogleApi.DisplayVideo.V3.Model.ThirdPartyVendorConfig.t()) | nil
        }

  field(:brandLiftVendorConfigs,
    as: GoogleApi.DisplayVideo.V3.Model.ThirdPartyVendorConfig,
    type: :list
  )

  field(:brandSafetyVendorConfigs,
    as: GoogleApi.DisplayVideo.V3.Model.ThirdPartyVendorConfig,
    type: :list
  )

  field(:reachVendorConfigs,
    as: GoogleApi.DisplayVideo.V3.Model.ThirdPartyVendorConfig,
    type: :list
  )

  field(:viewabilityVendorConfigs,
    as: GoogleApi.DisplayVideo.V3.Model.ThirdPartyVendorConfig,
    type: :list
  )
end

defimpl Poison.Decoder, for: GoogleApi.DisplayVideo.V3.Model.ThirdPartyMeasurementConfigs do
  def decode(value, options) do
    GoogleApi.DisplayVideo.V3.Model.ThirdPartyMeasurementConfigs.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DisplayVideo.V3.Model.ThirdPartyMeasurementConfigs do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
