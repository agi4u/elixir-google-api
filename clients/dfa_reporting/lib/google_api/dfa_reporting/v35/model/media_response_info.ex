# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DFAReporting.V35.Model.MediaResponseInfo do
  @moduledoc """
  This message is for backends to pass their scotty media specific fields to ESF. Backend will include this in their response message to ESF. Example: ExportFile is an rpc defined for upload using scotty from ESF. rpc ExportFile(ExportFileRequest) returns (ExportFileResponse) Message ExportFileResponse will include apiserving.MediaResponseInfo to tell ESF about data like dynamic_dropzone it needs to pass to Scotty. message ExportFileResponse { optional gdata.Media blob = 1; optional apiserving.MediaResponseInfo media_response_info = 2 }

  ## Attributes

  *   `customData` (*type:* `String.t`, *default:* `nil`) - Data to copy from backend response to the next backend requests. Custom data is returned to Scotty in the agent_state field, which Scotty will then provide in subsequent upload notifications.
  *   `dataStorageTransform` (*type:* `String.t`, *default:* `nil`) - Specifies any transformation to be applied to data before persisting it or retrieving from storage. E.g., encryption options for blobstore2. This should be of the form uploader_service.DataStorageTransform.
  *   `dynamicDropTarget` (*type:* `String.t`, *default:* `nil`) - Specifies the Scotty Drop Target to use for uploads. If present in a media response, Scotty does not upload to a standard drop zone. Instead, Scotty saves the upload directly to the location specified in this drop target. Unlike drop zones, the drop target is the final storage location for an upload. So, the agent does not need to clone the blob at the end of the upload. The agent is responsible for garbage collecting any orphaned blobs that may occur due to aborted uploads. For more information, see the drop target design doc here: http://goto/ScottyDropTarget This field will be preferred to dynamicDropzone. If provided, the identified field in the response must be of the type uploader.agent.DropTarget.
  *   `dynamicDropzone` (*type:* `String.t`, *default:* `nil`) - Specifies the Scotty dropzone to use for uploads.
  *   `requestClass` (*type:* `String.t`, *default:* `nil`) - Request class to use for all Blobstore operations for this request.
  *   `scottyAgentUserId` (*type:* `String.t`, *default:* `nil`) - Requester ID passed along to be recorded in the Scotty logs
  *   `scottyCustomerLog` (*type:* `String.t`, *default:* `nil`) - Customer-specific data to be recorded in the Scotty logs type is logs_proto_scotty.CustomerLog
  *   `trafficClassField` (*type:* `String.t`, *default:* `nil`) - Specifies the TrafficClass that Scotty should use for any RPCs to fetch the response bytes. Will override the traffic class GTOS of the incoming http request. This is a temporary field to facilitate whitelisting and experimentation by the bigstore agent only. For instance, this does not apply to RTMP reads. WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.
  *   `verifyHashFromHeader` (*type:* `boolean()`, *default:* `nil`) - Tells Scotty to verify hashes on the agent's behalf by parsing out the X-Goog-Hash header.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :customData => String.t() | nil,
          :dataStorageTransform => String.t() | nil,
          :dynamicDropTarget => String.t() | nil,
          :dynamicDropzone => String.t() | nil,
          :requestClass => String.t() | nil,
          :scottyAgentUserId => String.t() | nil,
          :scottyCustomerLog => String.t() | nil,
          :trafficClassField => String.t() | nil,
          :verifyHashFromHeader => boolean() | nil
        }

  field(:customData)
  field(:dataStorageTransform)
  field(:dynamicDropTarget)
  field(:dynamicDropzone)
  field(:requestClass)
  field(:scottyAgentUserId)
  field(:scottyCustomerLog)
  field(:trafficClassField)
  field(:verifyHashFromHeader)
end

defimpl Poison.Decoder, for: GoogleApi.DFAReporting.V35.Model.MediaResponseInfo do
  def decode(value, options) do
    GoogleApi.DFAReporting.V35.Model.MediaResponseInfo.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DFAReporting.V35.Model.MediaResponseInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
