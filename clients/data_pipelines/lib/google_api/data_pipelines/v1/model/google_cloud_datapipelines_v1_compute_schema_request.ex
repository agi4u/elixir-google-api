# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DataPipelines.V1.Model.GoogleCloudDatapipelinesV1ComputeSchemaRequest do
  @moduledoc """
  Request message for ComputeSchema

  ## Attributes

  *   `config` (*type:* `GoogleApi.DataPipelines.V1.Model.GoogleCloudDatapipelinesV1ConfiguredTransform.t`, *default:* `nil`) - Required. The configuration for the transform. If this is not a source, then each input with its schema must be set. It is not required to have any outputs set.
  *   `inputSchemas` (*type:* `list(GoogleApi.DataPipelines.V1.Model.GoogleCloudDatapipelinesV1Schema.t)`, *default:* `nil`) - Optional. In relation to the full pipeline graph, the schemas of the transforms that are used as inputs to the one for `config`. If `config` represents a transform for reading from some resource, then this should be empty. For all other transforms, at least one value must be provided.
  *   `rawSchema` (*type:* `GoogleApi.DataPipelines.V1.Model.GoogleCloudDatapipelinesV1RawSchemaInfo.t`, *default:* `nil`) - Optional. If set, this will use the provided raw schema to compute the schema rather than connecting to any resources. Validation will still occur to make sure it is compatible with all input schemas. If the transform is an IO, the IO must support that schema type.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :config =>
            GoogleApi.DataPipelines.V1.Model.GoogleCloudDatapipelinesV1ConfiguredTransform.t()
            | nil,
          :inputSchemas =>
            list(GoogleApi.DataPipelines.V1.Model.GoogleCloudDatapipelinesV1Schema.t()) | nil,
          :rawSchema =>
            GoogleApi.DataPipelines.V1.Model.GoogleCloudDatapipelinesV1RawSchemaInfo.t() | nil
        }

  field(:config,
    as: GoogleApi.DataPipelines.V1.Model.GoogleCloudDatapipelinesV1ConfiguredTransform
  )

  field(:inputSchemas,
    as: GoogleApi.DataPipelines.V1.Model.GoogleCloudDatapipelinesV1Schema,
    type: :list
  )

  field(:rawSchema, as: GoogleApi.DataPipelines.V1.Model.GoogleCloudDatapipelinesV1RawSchemaInfo)
end

defimpl Poison.Decoder,
  for: GoogleApi.DataPipelines.V1.Model.GoogleCloudDatapipelinesV1ComputeSchemaRequest do
  def decode(value, options) do
    GoogleApi.DataPipelines.V1.Model.GoogleCloudDatapipelinesV1ComputeSchemaRequest.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.DataPipelines.V1.Model.GoogleCloudDatapipelinesV1ComputeSchemaRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
