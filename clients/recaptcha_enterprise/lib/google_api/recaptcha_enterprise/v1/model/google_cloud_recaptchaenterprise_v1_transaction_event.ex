# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.RecaptchaEnterprise.V1.Model.GoogleCloudRecaptchaenterpriseV1TransactionEvent do
  @moduledoc """
  Describes an event in the lifecycle of a payment transaction.

  ## Attributes

  *   `eventTime` (*type:* `DateTime.t`, *default:* `nil`) - Optional. Timestamp when this transaction event occurred; otherwise assumed to be the time of the API call.
  *   `eventType` (*type:* `String.t`, *default:* `nil`) - Optional. The type of this transaction event.
  *   `reason` (*type:* `String.t`, *default:* `nil`) - Optional. The reason or standardized code that corresponds with this transaction event, if one exists. For example, a CHARGEBACK event with code 6005.
  *   `value` (*type:* `float()`, *default:* `nil`) - Optional. The value that corresponds with this transaction event, if one exists. For example, a refund event where $5.00 was refunded. Currency is obtained from the original transaction data.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :eventTime => DateTime.t() | nil,
          :eventType => String.t() | nil,
          :reason => String.t() | nil,
          :value => float() | nil
        }

  field(:eventTime, as: DateTime)
  field(:eventType)
  field(:reason)
  field(:value)
end

defimpl Poison.Decoder,
  for: GoogleApi.RecaptchaEnterprise.V1.Model.GoogleCloudRecaptchaenterpriseV1TransactionEvent do
  def decode(value, options) do
    GoogleApi.RecaptchaEnterprise.V1.Model.GoogleCloudRecaptchaenterpriseV1TransactionEvent.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.RecaptchaEnterprise.V1.Model.GoogleCloudRecaptchaenterpriseV1TransactionEvent do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
