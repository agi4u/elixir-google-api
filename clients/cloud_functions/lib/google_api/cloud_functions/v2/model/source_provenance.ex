# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudFunctions.V2.Model.SourceProvenance do
  @moduledoc """
  Provenance of the source. Ways to find the original source, or verify that some source was used for this build.

  ## Attributes

  *   `resolvedRepoSource` (*type:* `GoogleApi.CloudFunctions.V2.Model.RepoSource.t`, *default:* `nil`) - A copy of the build's `source.repo_source`, if exists, with any revisions resolved.
  *   `resolvedStorageSource` (*type:* `GoogleApi.CloudFunctions.V2.Model.StorageSource.t`, *default:* `nil`) - A copy of the build's `source.storage_source`, if exists, with any generations resolved.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :resolvedRepoSource => GoogleApi.CloudFunctions.V2.Model.RepoSource.t() | nil,
          :resolvedStorageSource => GoogleApi.CloudFunctions.V2.Model.StorageSource.t() | nil
        }

  field(:resolvedRepoSource, as: GoogleApi.CloudFunctions.V2.Model.RepoSource)
  field(:resolvedStorageSource, as: GoogleApi.CloudFunctions.V2.Model.StorageSource)
end

defimpl Poison.Decoder, for: GoogleApi.CloudFunctions.V2.Model.SourceProvenance do
  def decode(value, options) do
    GoogleApi.CloudFunctions.V2.Model.SourceProvenance.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudFunctions.V2.Model.SourceProvenance do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
