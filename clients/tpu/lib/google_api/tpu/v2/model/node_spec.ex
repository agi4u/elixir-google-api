# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.TPU.V2.Model.NodeSpec do
  @moduledoc """
  Details of the TPU node(s) being requested. Users can request either a single node or multiple nodes. NodeSpec provides the specification for node(s) to be created.

  ## Attributes

  *   `multisliceParams` (*type:* `GoogleApi.TPU.V2.Model.MultisliceParams.t`, *default:* `nil`) - Optional. Fields to specify in case of multislice request.
  *   `node` (*type:* `GoogleApi.TPU.V2.Model.Node.t`, *default:* `nil`) - Required. The node.
  *   `nodeId` (*type:* `String.t`, *default:* `nil`) - Optional. The unqualified resource name. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. This is only specified when requesting a single node. In case of multislice requests, multislice_params must be populated instead.
  *   `parent` (*type:* `String.t`, *default:* `nil`) - Required. The parent resource name.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :multisliceParams => GoogleApi.TPU.V2.Model.MultisliceParams.t() | nil,
          :node => GoogleApi.TPU.V2.Model.Node.t() | nil,
          :nodeId => String.t() | nil,
          :parent => String.t() | nil
        }

  field(:multisliceParams, as: GoogleApi.TPU.V2.Model.MultisliceParams)
  field(:node, as: GoogleApi.TPU.V2.Model.Node)
  field(:nodeId)
  field(:parent)
end

defimpl Poison.Decoder, for: GoogleApi.TPU.V2.Model.NodeSpec do
  def decode(value, options) do
    GoogleApi.TPU.V2.Model.NodeSpec.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.TPU.V2.Model.NodeSpec do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
