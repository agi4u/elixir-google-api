# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Gmail.V1.Model.CseIdentity do
  @moduledoc """
  The client-side encryption (CSE) configuration for the email address of an authenticated user. Gmail uses CSE configurations to save drafts of client-side encrypted email messages, and to sign and send encrypted email messages.

  ## Attributes

  *   `emailAddress` (*type:* `String.t`, *default:* `nil`) - The email address for the sending identity. The email address must be the primary email address of the authenticated user.
  *   `primaryKeyPairId` (*type:* `String.t`, *default:* `nil`) - If a key pair is associated, the ID of the key pair, CseKeyPair.
  *   `signAndEncryptKeyPairs` (*type:* `GoogleApi.Gmail.V1.Model.SignAndEncryptKeyPairs.t`, *default:* `nil`) - The configuration of a CSE identity that uses different key pairs for signing and encryption.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :emailAddress => String.t() | nil,
          :primaryKeyPairId => String.t() | nil,
          :signAndEncryptKeyPairs => GoogleApi.Gmail.V1.Model.SignAndEncryptKeyPairs.t() | nil
        }

  field(:emailAddress)
  field(:primaryKeyPairId)
  field(:signAndEncryptKeyPairs, as: GoogleApi.Gmail.V1.Model.SignAndEncryptKeyPairs)
end

defimpl Poison.Decoder, for: GoogleApi.Gmail.V1.Model.CseIdentity do
  def decode(value, options) do
    GoogleApi.Gmail.V1.Model.CseIdentity.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Gmail.V1.Model.CseIdentity do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
