# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dataflow.V1b3.Model.StreamingScalingReport do
  @moduledoc """
  Contains per-user worker telemetry used in streaming autoscaling.

  ## Attributes

  *   `activeBundleCount` (*type:* `integer()`, *default:* `nil`) - 
  *   `activeThreadCount` (*type:* `integer()`, *default:* `nil`) - Current acive thread count.
  *   `maximumBundleCount` (*type:* `integer()`, *default:* `nil`) - Maximum bundle count.
  *   `maximumBytes` (*type:* `String.t`, *default:* `nil`) - Maximum bytes.
  *   `maximumBytesCount` (*type:* `integer()`, *default:* `nil`) - 
  *   `maximumThreadCount` (*type:* `integer()`, *default:* `nil`) - Maximum thread count limit.
  *   `outstandingBundleCount` (*type:* `integer()`, *default:* `nil`) - Current outstanding bundle count.
  *   `outstandingBytes` (*type:* `String.t`, *default:* `nil`) - Current outstanding bytes.
  *   `outstandingBytesCount` (*type:* `integer()`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :activeBundleCount => integer() | nil,
          :activeThreadCount => integer() | nil,
          :maximumBundleCount => integer() | nil,
          :maximumBytes => String.t() | nil,
          :maximumBytesCount => integer() | nil,
          :maximumThreadCount => integer() | nil,
          :outstandingBundleCount => integer() | nil,
          :outstandingBytes => String.t() | nil,
          :outstandingBytesCount => integer() | nil
        }

  field(:activeBundleCount)
  field(:activeThreadCount)
  field(:maximumBundleCount)
  field(:maximumBytes)
  field(:maximumBytesCount)
  field(:maximumThreadCount)
  field(:outstandingBundleCount)
  field(:outstandingBytes)
  field(:outstandingBytesCount)
end

defimpl Poison.Decoder, for: GoogleApi.Dataflow.V1b3.Model.StreamingScalingReport do
  def decode(value, options) do
    GoogleApi.Dataflow.V1b3.Model.StreamingScalingReport.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataflow.V1b3.Model.StreamingScalingReport do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
