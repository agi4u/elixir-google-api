# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dataplex.V1.Model.GoogleCloudDataplexV1DataScanEventDataQualityResult do
  @moduledoc """
  Data quality result for data scan job.

  ## Attributes

  *   `dimensionPassed` (*type:* `map()`, *default:* `nil`) - The result of each dimension for data quality result. The key of the map is the name of the dimension. The value is the bool value depicting whether the dimension result was pass or not.
  *   `passed` (*type:* `boolean()`, *default:* `nil`) - Whether the data quality result was pass or not.
  *   `rowCount` (*type:* `String.t`, *default:* `nil`) - The count of rows processed in the data scan job.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :dimensionPassed => map() | nil,
          :passed => boolean() | nil,
          :rowCount => String.t() | nil
        }

  field(:dimensionPassed, type: :map)
  field(:passed)
  field(:rowCount)
end

defimpl Poison.Decoder,
  for: GoogleApi.Dataplex.V1.Model.GoogleCloudDataplexV1DataScanEventDataQualityResult do
  def decode(value, options) do
    GoogleApi.Dataplex.V1.Model.GoogleCloudDataplexV1DataScanEventDataQualityResult.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.Dataplex.V1.Model.GoogleCloudDataplexV1DataScanEventDataQualityResult do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
