# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.SecurityCenter.V1.Model.Exfiltration do
  @moduledoc """
  Exfiltration represents a data exfiltration attempt from one or more sources to one or more targets. The `sources` attribute lists the sources of the exfiltrated data. The `targets` attribute lists the destinations the data was copied to.

  ## Attributes

  *   `sources` (*type:* `list(GoogleApi.SecurityCenter.V1.Model.ExfilResource.t)`, *default:* `nil`) - If there are multiple sources, then the data is considered "joined" between them. For instance, BigQuery can join multiple tables, and each table would be considered a source.
  *   `targets` (*type:* `list(GoogleApi.SecurityCenter.V1.Model.ExfilResource.t)`, *default:* `nil`) - If there are multiple targets, each target would get a complete copy of the "joined" source data.
  *   `totalExfiltratedBytes` (*type:* `String.t`, *default:* `nil`) - Total exfiltrated bytes processed for the entire job.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :sources => list(GoogleApi.SecurityCenter.V1.Model.ExfilResource.t()) | nil,
          :targets => list(GoogleApi.SecurityCenter.V1.Model.ExfilResource.t()) | nil,
          :totalExfiltratedBytes => String.t() | nil
        }

  field(:sources, as: GoogleApi.SecurityCenter.V1.Model.ExfilResource, type: :list)
  field(:targets, as: GoogleApi.SecurityCenter.V1.Model.ExfilResource, type: :list)
  field(:totalExfiltratedBytes)
end

defimpl Poison.Decoder, for: GoogleApi.SecurityCenter.V1.Model.Exfiltration do
  def decode(value, options) do
    GoogleApi.SecurityCenter.V1.Model.Exfiltration.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.SecurityCenter.V1.Model.Exfiltration do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
