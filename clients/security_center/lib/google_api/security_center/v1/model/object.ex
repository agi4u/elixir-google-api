# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.SecurityCenter.V1.Model.Object do
  @moduledoc """
  Kubernetes object related to the finding, uniquely identified by GKNN. Used if the object Kind is not one of Pod, Node, NodePool, Binding, or AccessReview.

  ## Attributes

  *   `containers` (*type:* `list(GoogleApi.SecurityCenter.V1.Model.Container.t)`, *default:* `nil`) - Pod containers associated with this finding, if any.
  *   `group` (*type:* `String.t`, *default:* `nil`) - Kubernetes object group, such as "policy.k8s.io/v1".
  *   `kind` (*type:* `String.t`, *default:* `nil`) - Kubernetes object kind, such as "Namespace".
  *   `name` (*type:* `String.t`, *default:* `nil`) - Kubernetes object name. For details see https://kubernetes.io/docs/concepts/overview/working-with-objects/names/.
  *   `ns` (*type:* `String.t`, *default:* `nil`) - Kubernetes object namespace. Must be a valid DNS label. Named "ns" to avoid collision with C++ namespace keyword. For details see https://kubernetes.io/docs/tasks/administer-cluster/namespaces/.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :containers => list(GoogleApi.SecurityCenter.V1.Model.Container.t()) | nil,
          :group => String.t() | nil,
          :kind => String.t() | nil,
          :name => String.t() | nil,
          :ns => String.t() | nil
        }

  field(:containers, as: GoogleApi.SecurityCenter.V1.Model.Container, type: :list)
  field(:group)
  field(:kind)
  field(:name)
  field(:ns)
end

defimpl Poison.Decoder, for: GoogleApi.SecurityCenter.V1.Model.Object do
  def decode(value, options) do
    GoogleApi.SecurityCenter.V1.Model.Object.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.SecurityCenter.V1.Model.Object do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
