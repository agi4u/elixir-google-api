# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.HealthCare.V1beta1.Model.EvaluateAnnotationStoreRequest do
  @moduledoc """
  Request to evaluate an Annotation store against a ground truth [Annotation store].

  ## Attributes

  *   `bigqueryDestination` (*type:* `GoogleApi.HealthCare.V1beta1.Model.GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.t`, *default:* `nil`) - The BigQuery table where the server writes the output. BigQueryDestination requires the `roles/bigquery.dataEditor` and `roles/bigquery.jobUser` Cloud IAM roles.
  *   `evalInfoTypeMapping` (*type:* `map()`, *default:* `nil`) - Optional. InfoType mapping for `eval_store`. Different resources can map to the same infoType. For example, `PERSON_NAME`, `PERSON`, `NAME`, and `HUMAN` are different. To map all of these into a single infoType (such as `PERSON_NAME`), specify the following mapping: ``` info_type_mapping["PERSON"] = "PERSON_NAME" info_type_mapping["NAME"] = "PERSON_NAME" info_type_mapping["HUMAN"] = "PERSON_NAME" ``` Unmentioned infoTypes, such as `DATE`, are treated as identity mapping. For example: ``` info_type_mapping["DATE"] = "DATE" ``` InfoTypes are case-insensitive.
  *   `goldenInfoTypeMapping` (*type:* `map()`, *default:* `nil`) - Optional. Similar to `eval_info_type_mapping`, infoType mapping for `golden_store`.
  *   `goldenStore` (*type:* `String.t`, *default:* `nil`) - Required. The Annotation store to use as ground truth, in the format of `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.
  *   `infoTypeConfig` (*type:* `GoogleApi.HealthCare.V1beta1.Model.InfoTypeConfig.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :bigqueryDestination =>
            GoogleApi.HealthCare.V1beta1.Model.GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination.t()
            | nil,
          :evalInfoTypeMapping => map() | nil,
          :goldenInfoTypeMapping => map() | nil,
          :goldenStore => String.t() | nil,
          :infoTypeConfig => GoogleApi.HealthCare.V1beta1.Model.InfoTypeConfig.t() | nil
        }

  field(:bigqueryDestination,
    as:
      GoogleApi.HealthCare.V1beta1.Model.GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination
  )

  field(:evalInfoTypeMapping, type: :map)
  field(:goldenInfoTypeMapping, type: :map)
  field(:goldenStore)
  field(:infoTypeConfig, as: GoogleApi.HealthCare.V1beta1.Model.InfoTypeConfig)
end

defimpl Poison.Decoder, for: GoogleApi.HealthCare.V1beta1.Model.EvaluateAnnotationStoreRequest do
  def decode(value, options) do
    GoogleApi.HealthCare.V1beta1.Model.EvaluateAnnotationStoreRequest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.HealthCare.V1beta1.Model.EvaluateAnnotationStoreRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
