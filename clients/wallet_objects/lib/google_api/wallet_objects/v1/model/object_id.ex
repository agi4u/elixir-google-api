# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.WalletObjects.V1.Model.ObjectId do
  @moduledoc """
  This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.

  ## Attributes

  *   `bucketName` (*type:* `String.t`, *default:* `nil`) - The name of the bucket to which this object belongs.
  *   `generation` (*type:* `String.t`, *default:* `nil`) - Generation of the object. Generations are monotonically increasing across writes, allowing them to be be compared to determine which generation is newer. If this is omitted in a request, then you are requesting the live object. See http://go/bigstore-versions
  *   `objectName` (*type:* `String.t`, *default:* `nil`) - The name of the object.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :bucketName => String.t() | nil,
          :generation => String.t() | nil,
          :objectName => String.t() | nil
        }

  field(:bucketName)
  field(:generation)
  field(:objectName)
end

defimpl Poison.Decoder, for: GoogleApi.WalletObjects.V1.Model.ObjectId do
  def decode(value, options) do
    GoogleApi.WalletObjects.V1.Model.ObjectId.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.WalletObjects.V1.Model.ObjectId do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
