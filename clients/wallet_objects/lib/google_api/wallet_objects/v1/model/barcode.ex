# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.WalletObjects.V1.Model.Barcode do
  @moduledoc """


  ## Attributes

  *   `alternateText` (*type:* `String.t`, *default:* `nil`) - An optional text that will override the default text that shows under the barcode. This field is intended for a human readable equivalent of the barcode value, used when the barcode cannot be scanned.
  *   `kind` (*type:* `String.t`, *default:* `nil`) - Identifies what kind of resource this is. Value: the fixed string `"walletobjects#barcode"`.
  *   `renderEncoding` (*type:* `String.t`, *default:* `nil`) - The render encoding for the barcode. When specified, barcode is rendered in the given encoding. Otherwise best known encoding is chosen by Google.
  *   `showCodeText` (*type:* `GoogleApi.WalletObjects.V1.Model.LocalizedString.t`, *default:* `nil`) - Optional text that will be shown when the barcode is hidden behind a click action. This happens in cases where a pass has Smart Tap enabled. If not specified, a default is chosen by Google.
  *   `type` (*type:* `String.t`, *default:* `nil`) - The type of barcode.
  *   `value` (*type:* `String.t`, *default:* `nil`) - The value encoded in the barcode.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :alternateText => String.t() | nil,
          :kind => String.t() | nil,
          :renderEncoding => String.t() | nil,
          :showCodeText => GoogleApi.WalletObjects.V1.Model.LocalizedString.t() | nil,
          :type => String.t() | nil,
          :value => String.t() | nil
        }

  field(:alternateText)
  field(:kind)
  field(:renderEncoding)
  field(:showCodeText, as: GoogleApi.WalletObjects.V1.Model.LocalizedString)
  field(:type)
  field(:value)
end

defimpl Poison.Decoder, for: GoogleApi.WalletObjects.V1.Model.Barcode do
  def decode(value, options) do
    GoogleApi.WalletObjects.V1.Model.Barcode.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.WalletObjects.V1.Model.Barcode do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
