# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.TrafficDirector.V3.Model.ScopedRoutesConfigDump do
  @moduledoc """
  Envoy's scoped RDS implementation fills this message with all currently loaded route configuration scopes (defined via ScopedRouteConfigurationsSet protos). This message lists both the scopes defined inline with the higher order object (i.e., the HttpConnectionManager) and the dynamically obtained scopes via the SRDS API.

  ## Attributes

  *   `dynamicScopedRouteConfigs` (*type:* `list(GoogleApi.TrafficDirector.V3.Model.DynamicScopedRouteConfigs.t)`, *default:* `nil`) - The dynamically loaded scoped route configs.
  *   `inlineScopedRouteConfigs` (*type:* `list(GoogleApi.TrafficDirector.V3.Model.InlineScopedRouteConfigs.t)`, *default:* `nil`) - The statically loaded scoped route configs.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :dynamicScopedRouteConfigs =>
            list(GoogleApi.TrafficDirector.V3.Model.DynamicScopedRouteConfigs.t()) | nil,
          :inlineScopedRouteConfigs =>
            list(GoogleApi.TrafficDirector.V3.Model.InlineScopedRouteConfigs.t()) | nil
        }

  field(:dynamicScopedRouteConfigs,
    as: GoogleApi.TrafficDirector.V3.Model.DynamicScopedRouteConfigs,
    type: :list
  )

  field(:inlineScopedRouteConfigs,
    as: GoogleApi.TrafficDirector.V3.Model.InlineScopedRouteConfigs,
    type: :list
  )
end

defimpl Poison.Decoder, for: GoogleApi.TrafficDirector.V3.Model.ScopedRoutesConfigDump do
  def decode(value, options) do
    GoogleApi.TrafficDirector.V3.Model.ScopedRoutesConfigDump.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.TrafficDirector.V3.Model.ScopedRoutesConfigDump do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
