# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Connectors.V2.Model.PerSliSloEligibility do
  @moduledoc """
  PerSliSloEligibility is a mapping from an SLI name to eligibility.

  ## Attributes

  *   `eligibilities` (*type:* `%{optional(String.t) => GoogleApi.Connectors.V2.Model.SloEligibility.t}`, *default:* `nil`) - An entry in the eligibilities map specifies an eligibility for a particular SLI for the given instance. The SLI key in the name must be a valid SLI name specified in the Eligibility Exporter binary flags otherwise an error will be emitted by Eligibility Exporter and the oncaller will be alerted. If an SLI has been defined in the binary flags but the eligibilities map does not contain it, the corresponding SLI time series will not be emitted by the Eligibility Exporter. This ensures a smooth rollout and compatibility between the data produced by different versions of the Eligibility Exporters. If eligibilities map contains a key for an SLI which has not been declared in the binary flags, there will be an error message emitted in the Eligibility Exporter log and the metric for the SLI in question will not be emitted.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :eligibilities =>
            %{optional(String.t()) => GoogleApi.Connectors.V2.Model.SloEligibility.t()} | nil
        }

  field(:eligibilities, as: GoogleApi.Connectors.V2.Model.SloEligibility, type: :map)
end

defimpl Poison.Decoder, for: GoogleApi.Connectors.V2.Model.PerSliSloEligibility do
  def decode(value, options) do
    GoogleApi.Connectors.V2.Model.PerSliSloEligibility.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Connectors.V2.Model.PerSliSloEligibility do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
