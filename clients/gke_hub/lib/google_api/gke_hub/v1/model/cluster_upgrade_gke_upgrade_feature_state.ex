# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.GKEHub.V1.Model.ClusterUpgradeGKEUpgradeFeatureState do
  @moduledoc """
  GKEUpgradeFeatureState contains feature states for GKE clusters in the scope.

  ## Attributes

  *   `conditions` (*type:* `list(GoogleApi.GKEHub.V1.Model.ClusterUpgradeGKEUpgradeFeatureCondition.t)`, *default:* `nil`) - Current conditions of the feature.
  *   `upgradeState` (*type:* `list(GoogleApi.GKEHub.V1.Model.ClusterUpgradeGKEUpgradeState.t)`, *default:* `nil`) - Upgrade state. It will eventually replace `state`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :conditions =>
            list(GoogleApi.GKEHub.V1.Model.ClusterUpgradeGKEUpgradeFeatureCondition.t()) | nil,
          :upgradeState => list(GoogleApi.GKEHub.V1.Model.ClusterUpgradeGKEUpgradeState.t()) | nil
        }

  field(:conditions,
    as: GoogleApi.GKEHub.V1.Model.ClusterUpgradeGKEUpgradeFeatureCondition,
    type: :list
  )

  field(:upgradeState, as: GoogleApi.GKEHub.V1.Model.ClusterUpgradeGKEUpgradeState, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.GKEHub.V1.Model.ClusterUpgradeGKEUpgradeFeatureState do
  def decode(value, options) do
    GoogleApi.GKEHub.V1.Model.ClusterUpgradeGKEUpgradeFeatureState.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.GKEHub.V1.Model.ClusterUpgradeGKEUpgradeFeatureState do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
