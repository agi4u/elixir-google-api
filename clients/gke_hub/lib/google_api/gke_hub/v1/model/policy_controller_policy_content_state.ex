# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.GKEHub.V1.Model.PolicyControllerPolicyContentState do
  @moduledoc """
  The state of the policy controller policy content

  ## Attributes

  *   `bundleStates` (*type:* `%{optional(String.t) => GoogleApi.GKEHub.V1.Model.PolicyControllerOnClusterState.t}`, *default:* `nil`) - The state of the any bundles included in the chosen version of the manifest
  *   `referentialSyncConfigState` (*type:* `GoogleApi.GKEHub.V1.Model.PolicyControllerOnClusterState.t`, *default:* `nil`) - The state of the referential data sync configuration. This could represent the state of either the syncSet object(s) or the config object, depending on the version of PoCo configured by the user.
  *   `templateLibraryState` (*type:* `GoogleApi.GKEHub.V1.Model.PolicyControllerOnClusterState.t`, *default:* `nil`) - The state of the template library
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :bundleStates =>
            %{
              optional(String.t()) => GoogleApi.GKEHub.V1.Model.PolicyControllerOnClusterState.t()
            }
            | nil,
          :referentialSyncConfigState =>
            GoogleApi.GKEHub.V1.Model.PolicyControllerOnClusterState.t() | nil,
          :templateLibraryState =>
            GoogleApi.GKEHub.V1.Model.PolicyControllerOnClusterState.t() | nil
        }

  field(:bundleStates, as: GoogleApi.GKEHub.V1.Model.PolicyControllerOnClusterState, type: :map)
  field(:referentialSyncConfigState, as: GoogleApi.GKEHub.V1.Model.PolicyControllerOnClusterState)
  field(:templateLibraryState, as: GoogleApi.GKEHub.V1.Model.PolicyControllerOnClusterState)
end

defimpl Poison.Decoder, for: GoogleApi.GKEHub.V1.Model.PolicyControllerPolicyContentState do
  def decode(value, options) do
    GoogleApi.GKEHub.V1.Model.PolicyControllerPolicyContentState.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.GKEHub.V1.Model.PolicyControllerPolicyContentState do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
