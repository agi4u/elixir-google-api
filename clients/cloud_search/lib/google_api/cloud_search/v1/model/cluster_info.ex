# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudSearch.V1.Model.ClusterInfo do
  @moduledoc """
  ClusterInfo contains clustering related information for a particular thread that would be sent as part of the conversation view. Today, this information would be used by iOS notification server to identify whether the thread belongs to a cluster. If the thread belongs to a grouped cluster, it would identify whether the cluster is throttled.

  ## Attributes

  *   `clusterId` (*type:* `list(String.t)`, *default:* `nil`) - IDs of the highest priority clusters to which the thread belongs to. If this field is not present, the thread does not belong to any cluster and would be shown in the inbox, unclustered.
  *   `throttled` (*type:* `boolean()`, *default:* `nil`) - If the thread belongs to a grouped cluster and all of those clusters are throttled, then this field is set to true.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :clusterId => list(String.t()) | nil,
          :throttled => boolean() | nil
        }

  field(:clusterId, type: :list)
  field(:throttled)
end

defimpl Poison.Decoder, for: GoogleApi.CloudSearch.V1.Model.ClusterInfo do
  def decode(value, options) do
    GoogleApi.CloudSearch.V1.Model.ClusterInfo.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudSearch.V1.Model.ClusterInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
