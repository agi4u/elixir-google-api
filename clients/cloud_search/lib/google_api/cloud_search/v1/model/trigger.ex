# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudSearch.V1.Model.Trigger do
  @moduledoc """


  ## Attributes

  *   `actionType` (*type:* `integer()`, *default:* `nil`) - Each dispatcher should use an enum to for the actions that it supports. If a dispatcher has only one action, this does not need to be set. (It can be expanded later, defining the default behaviour as type 0.) For purposes such as batching, the type of a trigger is (dispatcher, action_type).
  *   `batchTimeUs` (*type:* `String.t`, *default:* `nil`) - Maximum possible delay in micros that can be tolerated so triggers can be batched, which makes processing more efficient compared to firing triggers individually. Note that the actual fire time will be somewhere in the timerange interval [fire_time_us, fire_time_us + batch_time_us).
  *   `dispatchId` (*type:* `integer()`, *default:* `nil`) - Must be set for DISPATCHER_STUBBY_DISPATCHER.
  *   `dispatcher` (*type:* `String.t`, *default:* `nil`) - Which server should interpret action_type.
  *   `fireTimeUs` (*type:* `String.t`, *default:* `nil`) - Earliest time to fire at in microseconds. The actual time that the trigger will fire will be in the timerange: [fire_time_us, fire_time_us + batch_time_us).
  *   `jobsettedServerSpec` (*type:* `GoogleApi.CloudSearch.V1.Model.JobsettedServerSpec.t`, *default:* `nil`) - Must be set for DISPATCHER_JOBSETTED_PRIMARY.
  *   `key` (*type:* `String.t`, *default:* `nil`) - The trigger key, if applicable.
  *   `rpcOptions` (*type:* `GoogleApi.CloudSearch.V1.Model.RpcOptions.t`, *default:* `nil`) - 
  *   `sliceFireTimeUs` (*type:* `String.t`, *default:* `nil`) - The slice_fire_time_us is automatically computed and stored as part of the trigger write. It represents the exact fire time at which the trigger will be queued to fire and will satisfy fire_time_us < slice_fire_time_us <= fire_time_us + batch_time_us Triggers have an index row in the slice trigger index with the row prefix matching this time. Note that this field is internal to gmail_cp and is ignored if set by external clients when adding / updating triggers.
  *   `triggerAction` (*type:* `GoogleApi.CloudSearch.V1.Model.TriggerAction.t`, *default:* `nil`) - Trigger action to perform. This should always be set.
  *   `triggerKey` (*type:* `GoogleApi.CloudSearch.V1.Model.TriggerKey.t`, *default:* `nil`) - The TriggerKey will uniquely determine a trigger within a given context. A context is a single message for message triggers or a single account for account triggers.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :actionType => integer() | nil,
          :batchTimeUs => String.t() | nil,
          :dispatchId => integer() | nil,
          :dispatcher => String.t() | nil,
          :fireTimeUs => String.t() | nil,
          :jobsettedServerSpec => GoogleApi.CloudSearch.V1.Model.JobsettedServerSpec.t() | nil,
          :key => String.t() | nil,
          :rpcOptions => GoogleApi.CloudSearch.V1.Model.RpcOptions.t() | nil,
          :sliceFireTimeUs => String.t() | nil,
          :triggerAction => GoogleApi.CloudSearch.V1.Model.TriggerAction.t() | nil,
          :triggerKey => GoogleApi.CloudSearch.V1.Model.TriggerKey.t() | nil
        }

  field(:actionType)
  field(:batchTimeUs)
  field(:dispatchId)
  field(:dispatcher)
  field(:fireTimeUs)
  field(:jobsettedServerSpec, as: GoogleApi.CloudSearch.V1.Model.JobsettedServerSpec)
  field(:key)
  field(:rpcOptions, as: GoogleApi.CloudSearch.V1.Model.RpcOptions)
  field(:sliceFireTimeUs)
  field(:triggerAction, as: GoogleApi.CloudSearch.V1.Model.TriggerAction)
  field(:triggerKey, as: GoogleApi.CloudSearch.V1.Model.TriggerKey)
end

defimpl Poison.Decoder, for: GoogleApi.CloudSearch.V1.Model.Trigger do
  def decode(value, options) do
    GoogleApi.CloudSearch.V1.Model.Trigger.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudSearch.V1.Model.Trigger do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
