# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudSearch.V1.Model.PrincipalProto do
  @moduledoc """
  A Principal represents something to which permissions are assigned, often but not always a user or group of some kind. It is most appropriate for use in ACLs and authorization checks. Callers should prefer to use the wrapper classes in google3/security/credentials/public/principal.h google3/java/com/google/security/credentials/Principal.java google3/security/credentials/go/principal.go unless direct proto access is essential. If you update this protocol buffer, please update the wrapper classes as well.

  ## Attributes

  *   `allAuthenticatedUsers` (*type:* `GoogleApi.CloudSearch.V1.Model.AllAuthenticatedUsersProto.t`, *default:* `nil`) - scope = ALL_AUTHENTICATED_USERS
  *   `capTokenHolder` (*type:* `GoogleApi.CloudSearch.V1.Model.CapTokenHolderProto.t`, *default:* `nil`) - scope = CAP_TOKEN_HOLDER
  *   `chat` (*type:* `GoogleApi.CloudSearch.V1.Model.ChatProto.t`, *default:* `nil`) - scope = CHAT
  *   `circle` (*type:* `GoogleApi.CloudSearch.V1.Model.CircleProto.t`, *default:* `nil`) - scope = CIRCLE
  *   `cloudPrincipal` (*type:* `GoogleApi.CloudSearch.V1.Model.CloudPrincipalProto.t`, *default:* `nil`) - scope = CLOUD_PRINCIPAL
  *   `contactGroup` (*type:* `GoogleApi.CloudSearch.V1.Model.ContactGroupProto.t`, *default:* `nil`) - scope = CONTACT_GROUP
  *   `emailOwner` (*type:* `GoogleApi.CloudSearch.V1.Model.EmailOwnerProto.t`, *default:* `nil`) - scope = EMAIL_OWNER
  *   `event` (*type:* `GoogleApi.CloudSearch.V1.Model.EventProto.t`, *default:* `nil`) - scope = EVENT
  *   `gaiaGroup` (*type:* `GoogleApi.CloudSearch.V1.Model.GaiaGroupProto.t`, *default:* `nil`) - scope = GAIA_GROUP
  *   `gaiaUser` (*type:* `GoogleApi.CloudSearch.V1.Model.GaiaUserProto.t`, *default:* `nil`) - scope = GAIA_USER
  *   `host` (*type:* `GoogleApi.CloudSearch.V1.Model.HostProto.t`, *default:* `nil`) - scope = HOST
  *   `ldapGroup` (*type:* `GoogleApi.CloudSearch.V1.Model.LdapGroupProto.t`, *default:* `nil`) - scope = LDAP_GROUP
  *   `ldapUser` (*type:* `GoogleApi.CloudSearch.V1.Model.LdapUserProto.t`, *default:* `nil`) - scope = LDAP_USER
  *   `mdbGroup` (*type:* `GoogleApi.CloudSearch.V1.Model.MdbGroupProto.t`, *default:* `nil`) - scope = MDB_GROUP
  *   `mdbUser` (*type:* `GoogleApi.CloudSearch.V1.Model.MdbUserProto.t`, *default:* `nil`) - scope = MDB_USER
  *   `oauthConsumer` (*type:* `GoogleApi.CloudSearch.V1.Model.OAuthConsumerProto.t`, *default:* `nil`) - scope = OAUTH_CONSUMER;
  *   `postiniUser` (*type:* `GoogleApi.CloudSearch.V1.Model.PostiniUserProto.t`, *default:* `nil`) - scope = POSTINI_USER
  *   `rbacRole` (*type:* `GoogleApi.CloudSearch.V1.Model.RbacRoleProto.t`, *default:* `nil`) - scope = RBAC_ROLE
  *   `rbacSubject` (*type:* `GoogleApi.CloudSearch.V1.Model.RbacSubjectProto.t`, *default:* `nil`) - scope = RBAC_SUBJECT
  *   `resourceRole` (*type:* `GoogleApi.CloudSearch.V1.Model.ResourceRoleProto.t`, *default:* `nil`) - scope = RESOURCE_ROLE
  *   `scope` (*type:* `String.t`, *default:* `nil`) - This is only optional because required enums cannot be extended. Currently required.
  *   `signingKeyPossessor` (*type:* `GoogleApi.CloudSearch.V1.Model.SigningKeyPossessorProto.t`, *default:* `nil`) - scope = SIGNING_KEY_POSSESSOR
  *   `simpleSecretHolder` (*type:* `GoogleApi.CloudSearch.V1.Model.SimpleSecretHolderProto.t`, *default:* `nil`) - scope = SIMPLE_SECRET_HOLDER
  *   `socialGraphNode` (*type:* `GoogleApi.CloudSearch.V1.Model.SocialGraphNodeProto.t`, *default:* `nil`) - scope = SOCIAL_GRAPH_NODE
  *   `square` (*type:* `GoogleApi.CloudSearch.V1.Model.SquareProto.t`, *default:* `nil`) - scope = SQUARE
  *   `youtubeUser` (*type:* `GoogleApi.CloudSearch.V1.Model.YoutubeUserProto.t`, *default:* `nil`) - scope = YOUTUBE_USER
  *   `zwiebackSession` (*type:* `GoogleApi.CloudSearch.V1.Model.ZwiebackSessionProto.t`, *default:* `nil`) - scope = ZWIEBACK_SESSION
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :allAuthenticatedUsers =>
            GoogleApi.CloudSearch.V1.Model.AllAuthenticatedUsersProto.t() | nil,
          :capTokenHolder => GoogleApi.CloudSearch.V1.Model.CapTokenHolderProto.t() | nil,
          :chat => GoogleApi.CloudSearch.V1.Model.ChatProto.t() | nil,
          :circle => GoogleApi.CloudSearch.V1.Model.CircleProto.t() | nil,
          :cloudPrincipal => GoogleApi.CloudSearch.V1.Model.CloudPrincipalProto.t() | nil,
          :contactGroup => GoogleApi.CloudSearch.V1.Model.ContactGroupProto.t() | nil,
          :emailOwner => GoogleApi.CloudSearch.V1.Model.EmailOwnerProto.t() | nil,
          :event => GoogleApi.CloudSearch.V1.Model.EventProto.t() | nil,
          :gaiaGroup => GoogleApi.CloudSearch.V1.Model.GaiaGroupProto.t() | nil,
          :gaiaUser => GoogleApi.CloudSearch.V1.Model.GaiaUserProto.t() | nil,
          :host => GoogleApi.CloudSearch.V1.Model.HostProto.t() | nil,
          :ldapGroup => GoogleApi.CloudSearch.V1.Model.LdapGroupProto.t() | nil,
          :ldapUser => GoogleApi.CloudSearch.V1.Model.LdapUserProto.t() | nil,
          :mdbGroup => GoogleApi.CloudSearch.V1.Model.MdbGroupProto.t() | nil,
          :mdbUser => GoogleApi.CloudSearch.V1.Model.MdbUserProto.t() | nil,
          :oauthConsumer => GoogleApi.CloudSearch.V1.Model.OAuthConsumerProto.t() | nil,
          :postiniUser => GoogleApi.CloudSearch.V1.Model.PostiniUserProto.t() | nil,
          :rbacRole => GoogleApi.CloudSearch.V1.Model.RbacRoleProto.t() | nil,
          :rbacSubject => GoogleApi.CloudSearch.V1.Model.RbacSubjectProto.t() | nil,
          :resourceRole => GoogleApi.CloudSearch.V1.Model.ResourceRoleProto.t() | nil,
          :scope => String.t() | nil,
          :signingKeyPossessor =>
            GoogleApi.CloudSearch.V1.Model.SigningKeyPossessorProto.t() | nil,
          :simpleSecretHolder => GoogleApi.CloudSearch.V1.Model.SimpleSecretHolderProto.t() | nil,
          :socialGraphNode => GoogleApi.CloudSearch.V1.Model.SocialGraphNodeProto.t() | nil,
          :square => GoogleApi.CloudSearch.V1.Model.SquareProto.t() | nil,
          :youtubeUser => GoogleApi.CloudSearch.V1.Model.YoutubeUserProto.t() | nil,
          :zwiebackSession => GoogleApi.CloudSearch.V1.Model.ZwiebackSessionProto.t() | nil
        }

  field(:allAuthenticatedUsers, as: GoogleApi.CloudSearch.V1.Model.AllAuthenticatedUsersProto)
  field(:capTokenHolder, as: GoogleApi.CloudSearch.V1.Model.CapTokenHolderProto)
  field(:chat, as: GoogleApi.CloudSearch.V1.Model.ChatProto)
  field(:circle, as: GoogleApi.CloudSearch.V1.Model.CircleProto)
  field(:cloudPrincipal, as: GoogleApi.CloudSearch.V1.Model.CloudPrincipalProto)
  field(:contactGroup, as: GoogleApi.CloudSearch.V1.Model.ContactGroupProto)
  field(:emailOwner, as: GoogleApi.CloudSearch.V1.Model.EmailOwnerProto)
  field(:event, as: GoogleApi.CloudSearch.V1.Model.EventProto)
  field(:gaiaGroup, as: GoogleApi.CloudSearch.V1.Model.GaiaGroupProto)
  field(:gaiaUser, as: GoogleApi.CloudSearch.V1.Model.GaiaUserProto)
  field(:host, as: GoogleApi.CloudSearch.V1.Model.HostProto)
  field(:ldapGroup, as: GoogleApi.CloudSearch.V1.Model.LdapGroupProto)
  field(:ldapUser, as: GoogleApi.CloudSearch.V1.Model.LdapUserProto)
  field(:mdbGroup, as: GoogleApi.CloudSearch.V1.Model.MdbGroupProto)
  field(:mdbUser, as: GoogleApi.CloudSearch.V1.Model.MdbUserProto)
  field(:oauthConsumer, as: GoogleApi.CloudSearch.V1.Model.OAuthConsumerProto)
  field(:postiniUser, as: GoogleApi.CloudSearch.V1.Model.PostiniUserProto)
  field(:rbacRole, as: GoogleApi.CloudSearch.V1.Model.RbacRoleProto)
  field(:rbacSubject, as: GoogleApi.CloudSearch.V1.Model.RbacSubjectProto)
  field(:resourceRole, as: GoogleApi.CloudSearch.V1.Model.ResourceRoleProto)
  field(:scope)
  field(:signingKeyPossessor, as: GoogleApi.CloudSearch.V1.Model.SigningKeyPossessorProto)
  field(:simpleSecretHolder, as: GoogleApi.CloudSearch.V1.Model.SimpleSecretHolderProto)
  field(:socialGraphNode, as: GoogleApi.CloudSearch.V1.Model.SocialGraphNodeProto)
  field(:square, as: GoogleApi.CloudSearch.V1.Model.SquareProto)
  field(:youtubeUser, as: GoogleApi.CloudSearch.V1.Model.YoutubeUserProto)
  field(:zwiebackSession, as: GoogleApi.CloudSearch.V1.Model.ZwiebackSessionProto)
end

defimpl Poison.Decoder, for: GoogleApi.CloudSearch.V1.Model.PrincipalProto do
  def decode(value, options) do
    GoogleApi.CloudSearch.V1.Model.PrincipalProto.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudSearch.V1.Model.PrincipalProto do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
