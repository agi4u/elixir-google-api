# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudSearch.V1.Model.LegacyUploadMetadata do
  @moduledoc """
  The original UploadMetadata that this DriveMetadata was converted from.

  ## Attributes

  *   `legacyUniqueId` (*type:* `String.t`, *default:* `nil`) - A unique ID generated from legacy UploadMetadata. This is used for interopping URLs after uploading blob to shared drive. Links in Classic might break without this. go/drive-file-attachment-interop-from-dynamite.
  *   `uploadMetadata` (*type:* `GoogleApi.CloudSearch.V1.Model.UploadMetadata.t`, *default:* `nil`) - The blob in this UploadMetadata has been uploaded to shared drive. This UploadMetadata is no longer attached to a message. go/shared-drive-data-migration.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :legacyUniqueId => String.t() | nil,
          :uploadMetadata => GoogleApi.CloudSearch.V1.Model.UploadMetadata.t() | nil
        }

  field(:legacyUniqueId)
  field(:uploadMetadata, as: GoogleApi.CloudSearch.V1.Model.UploadMetadata)
end

defimpl Poison.Decoder, for: GoogleApi.CloudSearch.V1.Model.LegacyUploadMetadata do
  def decode(value, options) do
    GoogleApi.CloudSearch.V1.Model.LegacyUploadMetadata.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudSearch.V1.Model.LegacyUploadMetadata do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
