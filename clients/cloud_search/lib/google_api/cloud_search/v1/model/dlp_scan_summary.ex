# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudSearch.V1.Model.DlpScanSummary do
  @moduledoc """
  A summary of a DLP scan event. This is a summary and should contain the minimum amount of data required to identify and process DLP scans. It is written to Starcast and encoded & returned to the client on attachment upload.

  ## Attributes

  *   `scanId` (*type:* `String.t`, *default:* `nil`) - The scan ID of the corresponding {@link DlpViolationScanRecord} in the {@link EphemeralDlpScans} Spanner table. This can be used to fetch additional details about the scan, e.g. for audit logging.
  *   `scanNotApplicableForContext` (*type:* `boolean()`, *default:* `nil`) - Indicates that was no attempt to scan a message or attachment because it was not applicable in the given context (e.g. atomic mutuate). If this is true, scan_outcome should not be set. This flag is used to identify messages that DLP did not attempt to scan for monitoring scan coverage. Contents that DLP attempted to scan but skipped can be identified by DlpScanOutcome.SCAN_SKIPPED_* reasons.
  *   `scanOutcome` (*type:* `String.t`, *default:* `nil`) - The outcome of a DLP Scan. If this is set, scan_not_applicable_for_context should not be true.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :scanId => String.t() | nil,
          :scanNotApplicableForContext => boolean() | nil,
          :scanOutcome => String.t() | nil
        }

  field(:scanId)
  field(:scanNotApplicableForContext)
  field(:scanOutcome)
end

defimpl Poison.Decoder, for: GoogleApi.CloudSearch.V1.Model.DlpScanSummary do
  def decode(value, options) do
    GoogleApi.CloudSearch.V1.Model.DlpScanSummary.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudSearch.V1.Model.DlpScanSummary do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
