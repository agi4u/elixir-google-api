# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudSearch.V1.Model.ChatContentExtension do
  @moduledoc """
  NEXT ID: 12

  ## Attributes

  *   `annotation` (*type:* `list(GoogleApi.CloudSearch.V1.Model.EventAnnotation.t)`, *default:* `nil`) - Annotations to decorate this event.
  *   `dynamitePlaceholderMetadata` (*type:* `GoogleApi.CloudSearch.V1.Model.DynamitePlaceholderMetadata.t`, *default:* `nil`) - This metadata informs how the placeholder string will be localized dynamically in Hangouts. See go/localization-of-system-messages. This is only used as part of REGULAR_CHAT_MESSAGE events.
  *   `eventOtrStatus` (*type:* `String.t`, *default:* `nil`) - Is this event OnTR or OffTR? Since some events can be ON_THE_RECORD and have an expiration_timestamp (for example enterprise retention users) we need to store the otr status.
  *   `groupLinkSharingModificationEvent` (*type:* `GoogleApi.CloudSearch.V1.Model.GroupLinkSharingModificationEvent.t`, *default:* `nil`) - Group-link sharing toggle event.
  *   `hangoutEvent` (*type:* `GoogleApi.CloudSearch.V1.Model.HangoutEvent.t`, *default:* `nil`) - Audio/video Hangout event.
  *   `inviteAcceptedEvent` (*type:* `GoogleApi.CloudSearch.V1.Model.InviteAcceptedEvent.t`, *default:* `nil`) - Invite accepted events. Note: this is only used ephemerally to sync to Gmail. No actual cent is stored in Papyrus.
  *   `membershipChangeEvent` (*type:* `GoogleApi.CloudSearch.V1.Model.MembershipChangeEvent.t`, *default:* `nil`) - Join/leave events.
  *   `otrChatMessageEvent` (*type:* `GoogleApi.CloudSearch.V1.Model.OtrChatMessageEvent.t`, *default:* `nil`) - Metadata for off-the-record message.
  *   `otrModificationEvent` (*type:* `GoogleApi.CloudSearch.V1.Model.OtrModificationEvent.t`, *default:* `nil`) - 
  *   `renameEvent` (*type:* `GoogleApi.CloudSearch.V1.Model.RenameEvent.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :annotation => list(GoogleApi.CloudSearch.V1.Model.EventAnnotation.t()) | nil,
          :dynamitePlaceholderMetadata =>
            GoogleApi.CloudSearch.V1.Model.DynamitePlaceholderMetadata.t() | nil,
          :eventOtrStatus => String.t() | nil,
          :groupLinkSharingModificationEvent =>
            GoogleApi.CloudSearch.V1.Model.GroupLinkSharingModificationEvent.t() | nil,
          :hangoutEvent => GoogleApi.CloudSearch.V1.Model.HangoutEvent.t() | nil,
          :inviteAcceptedEvent => GoogleApi.CloudSearch.V1.Model.InviteAcceptedEvent.t() | nil,
          :membershipChangeEvent =>
            GoogleApi.CloudSearch.V1.Model.MembershipChangeEvent.t() | nil,
          :otrChatMessageEvent => GoogleApi.CloudSearch.V1.Model.OtrChatMessageEvent.t() | nil,
          :otrModificationEvent => GoogleApi.CloudSearch.V1.Model.OtrModificationEvent.t() | nil,
          :renameEvent => GoogleApi.CloudSearch.V1.Model.RenameEvent.t() | nil
        }

  field(:annotation, as: GoogleApi.CloudSearch.V1.Model.EventAnnotation, type: :list)

  field(:dynamitePlaceholderMetadata,
    as: GoogleApi.CloudSearch.V1.Model.DynamitePlaceholderMetadata
  )

  field(:eventOtrStatus)

  field(:groupLinkSharingModificationEvent,
    as: GoogleApi.CloudSearch.V1.Model.GroupLinkSharingModificationEvent
  )

  field(:hangoutEvent, as: GoogleApi.CloudSearch.V1.Model.HangoutEvent)
  field(:inviteAcceptedEvent, as: GoogleApi.CloudSearch.V1.Model.InviteAcceptedEvent)
  field(:membershipChangeEvent, as: GoogleApi.CloudSearch.V1.Model.MembershipChangeEvent)
  field(:otrChatMessageEvent, as: GoogleApi.CloudSearch.V1.Model.OtrChatMessageEvent)
  field(:otrModificationEvent, as: GoogleApi.CloudSearch.V1.Model.OtrModificationEvent)
  field(:renameEvent, as: GoogleApi.CloudSearch.V1.Model.RenameEvent)
end

defimpl Poison.Decoder, for: GoogleApi.CloudSearch.V1.Model.ChatContentExtension do
  def decode(value, options) do
    GoogleApi.CloudSearch.V1.Model.ChatContentExtension.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudSearch.V1.Model.ChatContentExtension do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
