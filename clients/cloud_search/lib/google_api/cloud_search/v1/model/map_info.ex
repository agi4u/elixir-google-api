# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudSearch.V1.Model.MapInfo do
  @moduledoc """
  Geo information used for rendering a map that shows the user's work location.

  ## Attributes

  *   `lat` (*type:* `float()`, *default:* `nil`) - Latitude in degrees
  *   `locationUrl` (*type:* `GoogleApi.CloudSearch.V1.Model.SafeUrlProto.t`, *default:* `nil`) - URL to a view of a map centered on the user's work location in Campus Maps (for google.com) or Google Maps (external).
  *   `long` (*type:* `float()`, *default:* `nil`) - Longitude in degrees
  *   `mapTile` (*type:* `list(GoogleApi.CloudSearch.V1.Model.MapTile.t)`, *default:* `nil`) - MapTiles for the area around a user's work location
  *   `zoom` (*type:* `integer()`, *default:* `nil`) - The zoom level of the map. A constant zoom value of 18 is used for now to match the zoom of the map shown on a Moma Teams Profile page
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :lat => float() | nil,
          :locationUrl => GoogleApi.CloudSearch.V1.Model.SafeUrlProto.t() | nil,
          :long => float() | nil,
          :mapTile => list(GoogleApi.CloudSearch.V1.Model.MapTile.t()) | nil,
          :zoom => integer() | nil
        }

  field(:lat)
  field(:locationUrl, as: GoogleApi.CloudSearch.V1.Model.SafeUrlProto)
  field(:long)
  field(:mapTile, as: GoogleApi.CloudSearch.V1.Model.MapTile, type: :list)
  field(:zoom)
end

defimpl Poison.Decoder, for: GoogleApi.CloudSearch.V1.Model.MapInfo do
  def decode(value, options) do
    GoogleApi.CloudSearch.V1.Model.MapInfo.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudSearch.V1.Model.MapInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
