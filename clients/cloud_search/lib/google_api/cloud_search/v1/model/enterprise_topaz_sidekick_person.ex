# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudSearch.V1.Model.EnterpriseTopazSidekickPerson do
  @moduledoc """
  Person.

  ## Attributes

  *   `affinityLevel` (*type:* `String.t`, *default:* `nil`) - The level of affinity this person has with the requesting user.
  *   `attendingStatus` (*type:* `String.t`, *default:* `nil`) - Attendance status of the person when included in a meeting event.
  *   `email` (*type:* `String.t`, *default:* `nil`) - Email.
  *   `gaiaId` (*type:* `String.t`, *default:* `nil`) - Gaia id.
  *   `isGroup` (*type:* `boolean()`, *default:* `nil`) - Whether the invitee is a group.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Name.
  *   `obfuscatedGaiaId` (*type:* `String.t`, *default:* `nil`) - Obfuscated Gaia id.
  *   `photoUrl` (*type:* `String.t`, *default:* `nil`) - Absolute URL to the profile photo of the person.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :affinityLevel => String.t() | nil,
          :attendingStatus => String.t() | nil,
          :email => String.t() | nil,
          :gaiaId => String.t() | nil,
          :isGroup => boolean() | nil,
          :name => String.t() | nil,
          :obfuscatedGaiaId => String.t() | nil,
          :photoUrl => String.t() | nil
        }

  field(:affinityLevel)
  field(:attendingStatus)
  field(:email)
  field(:gaiaId)
  field(:isGroup)
  field(:name)
  field(:obfuscatedGaiaId)
  field(:photoUrl)
end

defimpl Poison.Decoder, for: GoogleApi.CloudSearch.V1.Model.EnterpriseTopazSidekickPerson do
  def decode(value, options) do
    GoogleApi.CloudSearch.V1.Model.EnterpriseTopazSidekickPerson.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudSearch.V1.Model.EnterpriseTopazSidekickPerson do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
