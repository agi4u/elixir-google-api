# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudSearch.V1.Model.ItemThread do
  @moduledoc """
  An ItemThread is an ordered list of Items. An ItemThread corresponds to a "conversation" in the context of mail. An Item belongs to exactly one ItemThread.

  ## Attributes

  *   `clusterInfo` (*type:* `GoogleApi.CloudSearch.V1.Model.ClusterInfo.t`, *default:* `nil`) - 
  *   `item` (*type:* `list(GoogleApi.CloudSearch.V1.Model.FuseboxItem.t)`, *default:* `nil`) - The Items in the ItemThread. In the context of a search, the list of Items may be a subset of those that logically belong to the ItemThread. The details of which items are included are available in the ItemThreadView returned in the overall rpc response.
  *   `lastItemId` (*type:* `String.t`, *default:* `nil`) - The server id of the last item returned in the ItemThread. This can be deduced from the [item] list but is provided for convenience. When manually constructing an ItemThreadViewSpec to perform operations on the ItemThread, this value can be used as the [high_item_id_watermark].
  *   `matchInfo` (*type:* `GoogleApi.CloudSearch.V1.Model.FuseboxItemThreadMatchInfo.t`, *default:* `nil`) - 
  *   `snippet` (*type:* `String.t`, *default:* `nil`) - A snippet summarizing the thread. This field is only populated for searches.
  *   `threadKey` (*type:* `GoogleApi.CloudSearch.V1.Model.MultiKey.t`, *default:* `nil`) - The MultiKey that identifies this thread. This value never changes, i.e. remains constant across modifications to the thread, including addition, relabeling, or deletion of contained Items. As such, the thread key may not necessarily correspond to the key of an contained Item. Legacy note: The "server_id" of the thread key is equivalent to the notion of the "original thread id" in the CSS API.
  *   `threadLocator` (*type:* `String.t`, *default:* `nil`) - A base64 encoded and encrypted string generated from the Gaia Id and the thread id. Used to generate the permalink for this thread, exposed from Gmail API.
  *   `topicState` (*type:* `GoogleApi.CloudSearch.V1.Model.TopicState.t`, *default:* `nil`) - Next available id : 10
  *   `version` (*type:* `String.t`, *default:* `nil`) - The latest history operation id that resulted in a mutation of any item in the thread.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :clusterInfo => GoogleApi.CloudSearch.V1.Model.ClusterInfo.t() | nil,
          :item => list(GoogleApi.CloudSearch.V1.Model.FuseboxItem.t()) | nil,
          :lastItemId => String.t() | nil,
          :matchInfo => GoogleApi.CloudSearch.V1.Model.FuseboxItemThreadMatchInfo.t() | nil,
          :snippet => String.t() | nil,
          :threadKey => GoogleApi.CloudSearch.V1.Model.MultiKey.t() | nil,
          :threadLocator => String.t() | nil,
          :topicState => GoogleApi.CloudSearch.V1.Model.TopicState.t() | nil,
          :version => String.t() | nil
        }

  field(:clusterInfo, as: GoogleApi.CloudSearch.V1.Model.ClusterInfo)
  field(:item, as: GoogleApi.CloudSearch.V1.Model.FuseboxItem, type: :list)
  field(:lastItemId)
  field(:matchInfo, as: GoogleApi.CloudSearch.V1.Model.FuseboxItemThreadMatchInfo)
  field(:snippet)
  field(:threadKey, as: GoogleApi.CloudSearch.V1.Model.MultiKey)
  field(:threadLocator)
  field(:topicState, as: GoogleApi.CloudSearch.V1.Model.TopicState)
  field(:version)
end

defimpl Poison.Decoder, for: GoogleApi.CloudSearch.V1.Model.ItemThread do
  def decode(value, options) do
    GoogleApi.CloudSearch.V1.Model.ItemThread.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudSearch.V1.Model.ItemThread do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
