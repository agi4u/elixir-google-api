# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudSearch.V1.Model.CallInfo do
  @moduledoc """
  Contains information regarding an ongoing conference (aka call) for a meeting space.

  ## Attributes

  *   `abuseReportingConfig` (*type:* `GoogleApi.CloudSearch.V1.Model.AbuseReportingConfig.t`, *default:* `nil`) - Abuse reporting configuration for the ongoing conference.
  *   `artifactOwner` (*type:* `GoogleApi.CloudSearch.V1.Model.UserDisplayInfo.t`, *default:* `nil`) - Output only. Display name of the owner of artifacts generated in this conference. The expected use of this in clients is to present info like "This recording will be sent to John Doe's Drive". This field can be empty if preferred display name determination fails for any reason.
  *   `attachedDocuments` (*type:* `list(GoogleApi.CloudSearch.V1.Model.DocumentInfo.t)`, *default:* `nil`) - Output only. Documents attached to an ongoing conference.
  *   `availableReactions` (*type:* `list(GoogleApi.CloudSearch.V1.Model.ReactionInfo.t)`, *default:* `nil`) - Output only. The set of reactions that clients are allowed to send and can expect to receive. Note that a device in the conference should have the MAY_SEND_REACTIONS privilege to be able to send reactions.
  *   `broadcastSessionInfo` (*type:* `GoogleApi.CloudSearch.V1.Model.BroadcastSessionInfo.t`, *default:* `nil`) - Information about active broadcast session in the ongoing conference.
  *   `calendarEventId` (*type:* `String.t`, *default:* `nil`) - Output only. The calendar event ID of a Google Calendar event that the meeting space is associated with. If the meeting space is not associated with an event in Google Calendar, this field is empty. For recurring events, it refers to the recurring instance associated with the current call, as determined by the server.
  *   `chatConfig` (*type:* `GoogleApi.CloudSearch.V1.Model.ChatConfig.t`, *default:* `nil`) - Configuration for the chat for this conference.
  *   `coActivity` (*type:* `GoogleApi.CloudSearch.V1.Model.CoActivity.t`, *default:* `nil`) - The current co-activity session, or unset if there is none in progress. A co-activity session can be initiated by devices in JOINED state . Initiator of the co-activity is expected to populate this field to start the session. Once clients detect that the co-activity has finished, any JOINED device can clear this field to end the co-activity session. In the case of switching activities, the initiator of the new activity merely needs to override this with the new co-activity data, and all connected clients are expected to handle the transition gracefully.
  *   `collaboration` (*type:* `GoogleApi.CloudSearch.V1.Model.Collaboration.t`, *default:* `nil`) - The current collaboration session, or unset if no collaboration is in progress.
  *   `cseInfo` (*type:* `GoogleApi.CloudSearch.V1.Model.CseInfo.t`, *default:* `nil`) - CSE information for the ongoing conference.
  *   `maxJoinedDevices` (*type:* `integer()`, *default:* `nil`) - Output only. The maximum number of devices that may be in the joined state simultaneously in this conference. This can be used by clients to guess whether it will be possible to join, but the only way to know is to try to join. It can also be used to inform users about the limit that is in effect. This limit is normally set when the conference is created and not changed during the lifetime of the conference. But there are some cases where it may change, so clients should be aware that the information may be stale.
  *   `mediaBackendInfo` (*type:* `String.t`, *default:* `nil`) - Output only. Information about the media backend for the currently ongoing conference in the meeting space. The media backend information will only be filled in for clients that are supposed to present the information. The information should be displayed in a debug panel and is only intended for internal debugging purposes. If the string is empty nothing should be displayed about the media backend.
  *   `organizationName` (*type:* `String.t`, *default:* `nil`) - Output only. The name or description of the organization or domain that the organizer belongs to. The expected use of this in clients is to present messages like "John Doe (outside of Google.com) is trying to join this call", where "Google.com" is the organization name. The field will be empty if the organization name could not be determined, possibly because of a backend error.
  *   `paygateInfo` (*type:* `GoogleApi.CloudSearch.V1.Model.PaygateInfo.t`, *default:* `nil`) - Paygate information to clients.
  *   `presenter` (*type:* `GoogleApi.CloudSearch.V1.Model.Presenter.t`, *default:* `nil`) - The current presenter in the call, or unset if there is no current presenter. Clients can set this to change the presenter.
  *   `recordingInfo` (*type:* `GoogleApi.CloudSearch.V1.Model.RecordingInfo.t`, *default:* `nil`) - Deprecated, use RecordingSessionInfo instead. Info about recording for this conference. This will always be set in server responses, with a valid recording status. This is superseded by streaming_sessions field, which contains the same information about this recording as well as additional information about other application type at the same time. This will be deprecated and removed at some point.
  *   `recordingSessionInfo` (*type:* `GoogleApi.CloudSearch.V1.Model.RecordingSessionInfo.t`, *default:* `nil`) - Information about active recording session in the ongoing conference.
  *   `settings` (*type:* `GoogleApi.CloudSearch.V1.Model.CallSettings.t`, *default:* `nil`) - Settings of the ongoing conference.
  *   `streamingSessions` (*type:* `list(GoogleApi.CloudSearch.V1.Model.StreamingSessionInfo.t)`, *default:* `nil`) - Output only. Info about streaming sessions (recording or broadcast) for this conference. This should contain all active sessions. Currently, it's guaranteed to have at most one recording and at most one broadcast (at most two sessions in total). For each application type (recording or broadcast), latest inactive session is included if there's no active one.
  *   `transcriptionSessionInfo` (*type:* `GoogleApi.CloudSearch.V1.Model.TranscriptionSessionInfo.t`, *default:* `nil`) - Information about active transcription session in the ongoing conference.
  *   `viewerCount` (*type:* `integer()`, *default:* `nil`) - The number of devices viewing the conference - MeetingDevices that are in VIEWER role and JOINED state in the conference.
  *   `youTubeBroadcastSessionInfos` (*type:* `list(GoogleApi.CloudSearch.V1.Model.YouTubeBroadcastSessionInfo.t)`, *default:* `nil`) - Information about active YouTube broadcast sessions in the ongoing conference.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :abuseReportingConfig => GoogleApi.CloudSearch.V1.Model.AbuseReportingConfig.t() | nil,
          :artifactOwner => GoogleApi.CloudSearch.V1.Model.UserDisplayInfo.t() | nil,
          :attachedDocuments => list(GoogleApi.CloudSearch.V1.Model.DocumentInfo.t()) | nil,
          :availableReactions => list(GoogleApi.CloudSearch.V1.Model.ReactionInfo.t()) | nil,
          :broadcastSessionInfo => GoogleApi.CloudSearch.V1.Model.BroadcastSessionInfo.t() | nil,
          :calendarEventId => String.t() | nil,
          :chatConfig => GoogleApi.CloudSearch.V1.Model.ChatConfig.t() | nil,
          :coActivity => GoogleApi.CloudSearch.V1.Model.CoActivity.t() | nil,
          :collaboration => GoogleApi.CloudSearch.V1.Model.Collaboration.t() | nil,
          :cseInfo => GoogleApi.CloudSearch.V1.Model.CseInfo.t() | nil,
          :maxJoinedDevices => integer() | nil,
          :mediaBackendInfo => String.t() | nil,
          :organizationName => String.t() | nil,
          :paygateInfo => GoogleApi.CloudSearch.V1.Model.PaygateInfo.t() | nil,
          :presenter => GoogleApi.CloudSearch.V1.Model.Presenter.t() | nil,
          :recordingInfo => GoogleApi.CloudSearch.V1.Model.RecordingInfo.t() | nil,
          :recordingSessionInfo => GoogleApi.CloudSearch.V1.Model.RecordingSessionInfo.t() | nil,
          :settings => GoogleApi.CloudSearch.V1.Model.CallSettings.t() | nil,
          :streamingSessions =>
            list(GoogleApi.CloudSearch.V1.Model.StreamingSessionInfo.t()) | nil,
          :transcriptionSessionInfo =>
            GoogleApi.CloudSearch.V1.Model.TranscriptionSessionInfo.t() | nil,
          :viewerCount => integer() | nil,
          :youTubeBroadcastSessionInfos =>
            list(GoogleApi.CloudSearch.V1.Model.YouTubeBroadcastSessionInfo.t()) | nil
        }

  field(:abuseReportingConfig, as: GoogleApi.CloudSearch.V1.Model.AbuseReportingConfig)
  field(:artifactOwner, as: GoogleApi.CloudSearch.V1.Model.UserDisplayInfo)
  field(:attachedDocuments, as: GoogleApi.CloudSearch.V1.Model.DocumentInfo, type: :list)
  field(:availableReactions, as: GoogleApi.CloudSearch.V1.Model.ReactionInfo, type: :list)
  field(:broadcastSessionInfo, as: GoogleApi.CloudSearch.V1.Model.BroadcastSessionInfo)
  field(:calendarEventId)
  field(:chatConfig, as: GoogleApi.CloudSearch.V1.Model.ChatConfig)
  field(:coActivity, as: GoogleApi.CloudSearch.V1.Model.CoActivity)
  field(:collaboration, as: GoogleApi.CloudSearch.V1.Model.Collaboration)
  field(:cseInfo, as: GoogleApi.CloudSearch.V1.Model.CseInfo)
  field(:maxJoinedDevices)
  field(:mediaBackendInfo)
  field(:organizationName)
  field(:paygateInfo, as: GoogleApi.CloudSearch.V1.Model.PaygateInfo)
  field(:presenter, as: GoogleApi.CloudSearch.V1.Model.Presenter)
  field(:recordingInfo, as: GoogleApi.CloudSearch.V1.Model.RecordingInfo)
  field(:recordingSessionInfo, as: GoogleApi.CloudSearch.V1.Model.RecordingSessionInfo)
  field(:settings, as: GoogleApi.CloudSearch.V1.Model.CallSettings)
  field(:streamingSessions, as: GoogleApi.CloudSearch.V1.Model.StreamingSessionInfo, type: :list)
  field(:transcriptionSessionInfo, as: GoogleApi.CloudSearch.V1.Model.TranscriptionSessionInfo)
  field(:viewerCount)

  field(:youTubeBroadcastSessionInfos,
    as: GoogleApi.CloudSearch.V1.Model.YouTubeBroadcastSessionInfo,
    type: :list
  )
end

defimpl Poison.Decoder, for: GoogleApi.CloudSearch.V1.Model.CallInfo do
  def decode(value, options) do
    GoogleApi.CloudSearch.V1.Model.CallInfo.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudSearch.V1.Model.CallInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
