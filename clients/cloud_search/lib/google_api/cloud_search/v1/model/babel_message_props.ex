# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudSearch.V1.Model.BabelMessageProps do
  @moduledoc """
  Container for Babel (Hangouts Classic) only message properties. The properties here will not be consumed by Dynamite clients. They are relevant only for Hangouts Classic.

  ## Attributes

  *   `clientGeneratedId` (*type:* `String.t`, *default:* `nil`) - Babel clients locally generate this ID to dedupe against the async fanout.
  *   `contentExtension` (*type:* `GoogleApi.CloudSearch.V1.Model.ChatContentExtension.t`, *default:* `nil`) - Stores additional Babel-specific properties (such as event metadata).
  *   `deliveryMedium` (*type:* `GoogleApi.CloudSearch.V1.Model.DeliveryMedium.t`, *default:* `nil`) - Stores the delivery source of messages (such as phone number for SMS).
  *   `eventId` (*type:* `String.t`, *default:* `nil`) - Primary identifier used by Hangouts Classic for its events (messages).
  *   `messageContent` (*type:* `GoogleApi.CloudSearch.V1.Model.ChatConserverMessageContent.t`, *default:* `nil`) - Stores message segments (text content) and attachments (media URLs).
  *   `wasUpdatedByBackfill` (*type:* `boolean()`, *default:* `nil`) - Whether or not these message properties were backfilled by go/dinnertrain.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :clientGeneratedId => String.t() | nil,
          :contentExtension => GoogleApi.CloudSearch.V1.Model.ChatContentExtension.t() | nil,
          :deliveryMedium => GoogleApi.CloudSearch.V1.Model.DeliveryMedium.t() | nil,
          :eventId => String.t() | nil,
          :messageContent => GoogleApi.CloudSearch.V1.Model.ChatConserverMessageContent.t() | nil,
          :wasUpdatedByBackfill => boolean() | nil
        }

  field(:clientGeneratedId)
  field(:contentExtension, as: GoogleApi.CloudSearch.V1.Model.ChatContentExtension)
  field(:deliveryMedium, as: GoogleApi.CloudSearch.V1.Model.DeliveryMedium)
  field(:eventId)
  field(:messageContent, as: GoogleApi.CloudSearch.V1.Model.ChatConserverMessageContent)
  field(:wasUpdatedByBackfill)
end

defimpl Poison.Decoder, for: GoogleApi.CloudSearch.V1.Model.BabelMessageProps do
  def decode(value, options) do
    GoogleApi.CloudSearch.V1.Model.BabelMessageProps.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudSearch.V1.Model.BabelMessageProps do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
