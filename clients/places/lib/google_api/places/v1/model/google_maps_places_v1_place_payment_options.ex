# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Places.V1.Model.GoogleMapsPlacesV1PlacePaymentOptions do
  @moduledoc """
  Payment options the place accepts.

  ## Attributes

  *   `acceptsCashOnly` (*type:* `boolean()`, *default:* `nil`) - Place accepts cash only as payment. Places with this attribute may still accept other payment methods.
  *   `acceptsCreditCards` (*type:* `boolean()`, *default:* `nil`) - Place accepts credit cards as payment.
  *   `acceptsDebitCards` (*type:* `boolean()`, *default:* `nil`) - Place accepts debit cards as payment.
  *   `acceptsNfc` (*type:* `boolean()`, *default:* `nil`) - Place accepts NFC payments.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :acceptsCashOnly => boolean() | nil,
          :acceptsCreditCards => boolean() | nil,
          :acceptsDebitCards => boolean() | nil,
          :acceptsNfc => boolean() | nil
        }

  field(:acceptsCashOnly)
  field(:acceptsCreditCards)
  field(:acceptsDebitCards)
  field(:acceptsNfc)
end

defimpl Poison.Decoder, for: GoogleApi.Places.V1.Model.GoogleMapsPlacesV1PlacePaymentOptions do
  def decode(value, options) do
    GoogleApi.Places.V1.Model.GoogleMapsPlacesV1PlacePaymentOptions.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Places.V1.Model.GoogleMapsPlacesV1PlacePaymentOptions do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
