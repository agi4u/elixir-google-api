# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Batch.V1.Model.PlacementPolicy do
  @moduledoc """
  PlacementPolicy describes a group placement policy for the VMs controlled by this AllocationPolicy.

  ## Attributes

  *   `collocation` (*type:* `String.t`, *default:* `nil`) - UNSPECIFIED vs. COLLOCATED (default UNSPECIFIED). Use COLLOCATED when you want VMs to be located close to each other for low network latency between the VMs. No placement policy will be generated when collocation is UNSPECIFIED.
  *   `maxDistance` (*type:* `String.t`, *default:* `nil`) - When specified, causes the job to fail if more than max_distance logical switches are required between VMs. Batch uses the most compact possible placement of VMs even when max_distance is not specified. An explicit max_distance makes that level of compactness a strict requirement. Not yet implemented
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :collocation => String.t() | nil,
          :maxDistance => String.t() | nil
        }

  field(:collocation)
  field(:maxDistance)
end

defimpl Poison.Decoder, for: GoogleApi.Batch.V1.Model.PlacementPolicy do
  def decode(value, options) do
    GoogleApi.Batch.V1.Model.PlacementPolicy.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Batch.V1.Model.PlacementPolicy do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
