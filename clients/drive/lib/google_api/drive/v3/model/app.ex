# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Drive.V3.Model.App do
  @moduledoc """
  The `apps` resource provides a list of apps that a user has installed, with information about each app's supported MIME types, file extensions, and other details. Some resource methods (such as `apps.get`) require an `appId`. Use the `apps.list` method to retrieve the ID for an installed application.

  ## Attributes

  *   `authorized` (*type:* `boolean()`, *default:* `nil`) - Whether the app is authorized to access data on the user's Drive.
  *   `createInFolderTemplate` (*type:* `String.t`, *default:* `nil`) - The template URL to create a file with this app in a given folder. The template contains the {folderId} to be replaced by the folder ID house the new file.
  *   `createUrl` (*type:* `String.t`, *default:* `nil`) - The URL to create a file with this app.
  *   `hasDriveWideScope` (*type:* `boolean()`, *default:* `nil`) - Whether the app has Drive-wide scope. An app with Drive-wide scope can access all files in the user's Drive.
  *   `icons` (*type:* `list(GoogleApi.Drive.V3.Model.AppIcons.t)`, *default:* `nil`) - The various icons for the app.
  *   `id` (*type:* `String.t`, *default:* `nil`) - The ID of the app.
  *   `installed` (*type:* `boolean()`, *default:* `nil`) - Whether the app is installed.
  *   `kind` (*type:* `String.t`, *default:* `drive#app`) - Output only. Identifies what kind of resource this is. Value: the fixed string "drive#app".
  *   `longDescription` (*type:* `String.t`, *default:* `nil`) - A long description of the app.
  *   `name` (*type:* `String.t`, *default:* `nil`) - The name of the app.
  *   `objectType` (*type:* `String.t`, *default:* `nil`) - The type of object this app creates such as a Chart. If empty, the app name should be used instead.
  *   `openUrlTemplate` (*type:* `String.t`, *default:* `nil`) - The template URL for opening files with this app. The template contains {ids} or {exportIds} to be replaced by the actual file IDs. For more information, see Open Files for the full documentation.
  *   `primaryFileExtensions` (*type:* `list(String.t)`, *default:* `nil`) - The list of primary file extensions.
  *   `primaryMimeTypes` (*type:* `list(String.t)`, *default:* `nil`) - The list of primary MIME types.
  *   `productId` (*type:* `String.t`, *default:* `nil`) - The ID of the product listing for this app.
  *   `productUrl` (*type:* `String.t`, *default:* `nil`) - A link to the product listing for this app.
  *   `secondaryFileExtensions` (*type:* `list(String.t)`, *default:* `nil`) - The list of secondary file extensions.
  *   `secondaryMimeTypes` (*type:* `list(String.t)`, *default:* `nil`) - The list of secondary MIME types.
  *   `shortDescription` (*type:* `String.t`, *default:* `nil`) - A short description of the app.
  *   `supportsCreate` (*type:* `boolean()`, *default:* `nil`) - Whether this app supports creating objects.
  *   `supportsImport` (*type:* `boolean()`, *default:* `nil`) - Whether this app supports importing from Google Docs.
  *   `supportsMultiOpen` (*type:* `boolean()`, *default:* `nil`) - Whether this app supports opening more than one file.
  *   `supportsOfflineCreate` (*type:* `boolean()`, *default:* `nil`) - Whether this app supports creating files when offline.
  *   `useByDefault` (*type:* `boolean()`, *default:* `nil`) - Whether the app is selected as the default handler for the types it supports.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :authorized => boolean() | nil,
          :createInFolderTemplate => String.t() | nil,
          :createUrl => String.t() | nil,
          :hasDriveWideScope => boolean() | nil,
          :icons => list(GoogleApi.Drive.V3.Model.AppIcons.t()) | nil,
          :id => String.t() | nil,
          :installed => boolean() | nil,
          :kind => String.t() | nil,
          :longDescription => String.t() | nil,
          :name => String.t() | nil,
          :objectType => String.t() | nil,
          :openUrlTemplate => String.t() | nil,
          :primaryFileExtensions => list(String.t()) | nil,
          :primaryMimeTypes => list(String.t()) | nil,
          :productId => String.t() | nil,
          :productUrl => String.t() | nil,
          :secondaryFileExtensions => list(String.t()) | nil,
          :secondaryMimeTypes => list(String.t()) | nil,
          :shortDescription => String.t() | nil,
          :supportsCreate => boolean() | nil,
          :supportsImport => boolean() | nil,
          :supportsMultiOpen => boolean() | nil,
          :supportsOfflineCreate => boolean() | nil,
          :useByDefault => boolean() | nil
        }

  field(:authorized)
  field(:createInFolderTemplate)
  field(:createUrl)
  field(:hasDriveWideScope)
  field(:icons, as: GoogleApi.Drive.V3.Model.AppIcons, type: :list)
  field(:id)
  field(:installed)
  field(:kind)
  field(:longDescription)
  field(:name)
  field(:objectType)
  field(:openUrlTemplate)
  field(:primaryFileExtensions, type: :list)
  field(:primaryMimeTypes, type: :list)
  field(:productId)
  field(:productUrl)
  field(:secondaryFileExtensions, type: :list)
  field(:secondaryMimeTypes, type: :list)
  field(:shortDescription)
  field(:supportsCreate)
  field(:supportsImport)
  field(:supportsMultiOpen)
  field(:supportsOfflineCreate)
  field(:useByDefault)
end

defimpl Poison.Decoder, for: GoogleApi.Drive.V3.Model.App do
  def decode(value, options) do
    GoogleApi.Drive.V3.Model.App.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Drive.V3.Model.App do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
