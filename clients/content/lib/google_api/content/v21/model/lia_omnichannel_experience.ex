# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Content.V21.Model.LiaOmnichannelExperience do
  @moduledoc """
  Omnichannel experience details.

  ## Attributes

  *   `country` (*type:* `String.t`, *default:* `nil`) - The CLDR country code (for example, "US").
  *   `lsfType` (*type:* `String.t`, *default:* `nil`) - The Local Store Front (LSF) type for this country. Acceptable values are: - "`ghlsf`" (Google-Hosted Local Store Front) - "`mhlsfBasic`" (Merchant-Hosted Local Store Front Basic) - "`mhlsfFull`" (Merchant-Hosted Local Store Front Full) More details about these types can be found here.
  *   `pickupTypes` (*type:* `list(String.t)`, *default:* `nil`) - The Pickup types for this country. Acceptable values are: - "`pickupToday`" - "`pickupLater`" 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :country => String.t() | nil,
          :lsfType => String.t() | nil,
          :pickupTypes => list(String.t()) | nil
        }

  field(:country)
  field(:lsfType)
  field(:pickupTypes, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.Content.V21.Model.LiaOmnichannelExperience do
  def decode(value, options) do
    GoogleApi.Content.V21.Model.LiaOmnichannelExperience.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Content.V21.Model.LiaOmnichannelExperience do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
