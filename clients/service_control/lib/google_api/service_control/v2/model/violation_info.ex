# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ServiceControl.V2.Model.ViolationInfo do
  @moduledoc """
  Provides information about the Policy violation info for this request.

  ## Attributes

  *   `checkedValue` (*type:* `String.t`, *default:* `nil`) - Optional. Value that is being checked for the policy. This could be in encrypted form (if pii sensitive). This field will only be emitted in LIST_POLICY types
  *   `constraint` (*type:* `String.t`, *default:* `nil`) - Optional. Constraint name
  *   `errorMessage` (*type:* `String.t`, *default:* `nil`) - Optional. Error message that policy is indicating.
  *   `policyType` (*type:* `String.t`, *default:* `nil`) - Optional. Indicates the type of the policy.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :checkedValue => String.t() | nil,
          :constraint => String.t() | nil,
          :errorMessage => String.t() | nil,
          :policyType => String.t() | nil
        }

  field(:checkedValue)
  field(:constraint)
  field(:errorMessage)
  field(:policyType)
end

defimpl Poison.Decoder, for: GoogleApi.ServiceControl.V2.Model.ViolationInfo do
  def decode(value, options) do
    GoogleApi.ServiceControl.V2.Model.ViolationInfo.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ServiceControl.V2.Model.ViolationInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
