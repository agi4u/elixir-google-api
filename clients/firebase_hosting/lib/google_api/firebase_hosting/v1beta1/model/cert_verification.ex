# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.FirebaseHosting.V1beta1.Model.CertVerification do
  @moduledoc """
  A set of ACME challenges you can use to allow Hosting to create an SSL certificate for your domain name before directing traffic to Hosting servers. Use either the DNS or HTTP challenge; it's not necessary to provide both.

  ## Attributes

  *   `dns` (*type:* `GoogleApi.FirebaseHosting.V1beta1.Model.DnsUpdates.t`, *default:* `nil`) - Output only. A `TXT` record to add to your DNS records that confirms your intent to let Hosting create an SSL cert for your domain name.
  *   `http` (*type:* `GoogleApi.FirebaseHosting.V1beta1.Model.HttpUpdate.t`, *default:* `nil`) - Output only. A file to add to your existing, non-Hosting hosting service that confirms your intent to let Hosting create an SSL cert for your domain name.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :dns => GoogleApi.FirebaseHosting.V1beta1.Model.DnsUpdates.t() | nil,
          :http => GoogleApi.FirebaseHosting.V1beta1.Model.HttpUpdate.t() | nil
        }

  field(:dns, as: GoogleApi.FirebaseHosting.V1beta1.Model.DnsUpdates)
  field(:http, as: GoogleApi.FirebaseHosting.V1beta1.Model.HttpUpdate)
end

defimpl Poison.Decoder, for: GoogleApi.FirebaseHosting.V1beta1.Model.CertVerification do
  def decode(value, options) do
    GoogleApi.FirebaseHosting.V1beta1.Model.CertVerification.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.FirebaseHosting.V1beta1.Model.CertVerification do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
