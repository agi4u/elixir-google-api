# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Forms.V1.Model.ChoiceQuestion do
  @moduledoc """
  A radio/checkbox/dropdown question.

  ## Attributes

  *   `options` (*type:* `list(GoogleApi.Forms.V1.Model.Option.t)`, *default:* `nil`) - Required. List of options that a respondent must choose from.
  *   `shuffle` (*type:* `boolean()`, *default:* `nil`) - Whether the options should be displayed in random order for different instances of the quiz. This is often used to prevent cheating by respondents who might be looking at another respondent's screen, or to address bias in a survey that might be introduced by always putting the same options first or last.
  *   `type` (*type:* `String.t`, *default:* `nil`) - Required. The type of choice question.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :options => list(GoogleApi.Forms.V1.Model.Option.t()) | nil,
          :shuffle => boolean() | nil,
          :type => String.t() | nil
        }

  field(:options, as: GoogleApi.Forms.V1.Model.Option, type: :list)
  field(:shuffle)
  field(:type)
end

defimpl Poison.Decoder, for: GoogleApi.Forms.V1.Model.ChoiceQuestion do
  def decode(value, options) do
    GoogleApi.Forms.V1.Model.ChoiceQuestion.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Forms.V1.Model.ChoiceQuestion do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
