# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1ListDatabasesResponse do
  @moduledoc """
  The list of databases for a project.

  ## Attributes

  *   `databases` (*type:* `list(GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1Database.t)`, *default:* `nil`) - The databases in the project.
  *   `unreachable` (*type:* `list(String.t)`, *default:* `nil`) - In the event that data about individual databases cannot be listed they will be recorded here. An example entry might be: projects/some_project/locations/some_location This can happen if the Cloud Region that the Database resides in is currently unavailable. In this case we can't fetch all the details about the database. You may be able to get a more detailed error message (or possibly fetch the resource) by sending a 'Get' request for the resource or a 'List' request for the specific location.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :databases =>
            list(GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1Database.t()) | nil,
          :unreachable => list(String.t()) | nil
        }

  field(:databases, as: GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1Database, type: :list)
  field(:unreachable, type: :list)
end

defimpl Poison.Decoder,
  for: GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1ListDatabasesResponse do
  def decode(value, options) do
    GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1ListDatabasesResponse.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1ListDatabasesResponse do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
