# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Firestore.V1beta1.Model.StructuredQuery do
  @moduledoc """
  A Firestore query.

  ## Attributes

  *   `endAt` (*type:* `GoogleApi.Firestore.V1beta1.Model.Cursor.t`, *default:* `nil`) - A end point for the query results.
  *   `from` (*type:* `list(GoogleApi.Firestore.V1beta1.Model.CollectionSelector.t)`, *default:* `nil`) - The collections to query.
  *   `limit` (*type:* `integer()`, *default:* `nil`) - The maximum number of results to return. Applies after all other constraints. Must be >= 0 if specified.
  *   `offset` (*type:* `integer()`, *default:* `nil`) - The number of results to skip. Applies before limit, but after all other constraints. Must be >= 0 if specified.
  *   `orderBy` (*type:* `list(GoogleApi.Firestore.V1beta1.Model.Order.t)`, *default:* `nil`) - The order to apply to the query results. Firestore allows callers to provide a full ordering, a partial ordering, or no ordering at all. In all cases, Firestore guarantees a stable ordering through the following rules: * The `order_by` is required to reference all fields used with an inequality filter. * All fields that are required to be in the `order_by` but are not already present are appended in lexicographical ordering of the field name. * If an order on `__name__` is not specified, it is appended by default. Fields are appended with the same sort direction as the last order specified, or 'ASCENDING' if no order was specified. For example: * `ORDER BY a` becomes `ORDER BY a ASC, __name__ ASC` * `ORDER BY a DESC` becomes `ORDER BY a DESC, __name__ DESC` * `WHERE a > 1` becomes `WHERE a > 1 ORDER BY a ASC, __name__ ASC` * `WHERE __name__ > ... AND a > 1` becomes `WHERE __name__ > ... AND a > 1 ORDER BY a ASC, __name__ ASC`
  *   `select` (*type:* `GoogleApi.Firestore.V1beta1.Model.Projection.t`, *default:* `nil`) - The projection to return.
  *   `startAt` (*type:* `GoogleApi.Firestore.V1beta1.Model.Cursor.t`, *default:* `nil`) - A starting point for the query results.
  *   `where` (*type:* `GoogleApi.Firestore.V1beta1.Model.Filter.t`, *default:* `nil`) - The filter to apply.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :endAt => GoogleApi.Firestore.V1beta1.Model.Cursor.t() | nil,
          :from => list(GoogleApi.Firestore.V1beta1.Model.CollectionSelector.t()) | nil,
          :limit => integer() | nil,
          :offset => integer() | nil,
          :orderBy => list(GoogleApi.Firestore.V1beta1.Model.Order.t()) | nil,
          :select => GoogleApi.Firestore.V1beta1.Model.Projection.t() | nil,
          :startAt => GoogleApi.Firestore.V1beta1.Model.Cursor.t() | nil,
          :where => GoogleApi.Firestore.V1beta1.Model.Filter.t() | nil
        }

  field(:endAt, as: GoogleApi.Firestore.V1beta1.Model.Cursor)
  field(:from, as: GoogleApi.Firestore.V1beta1.Model.CollectionSelector, type: :list)
  field(:limit)
  field(:offset)
  field(:orderBy, as: GoogleApi.Firestore.V1beta1.Model.Order, type: :list)
  field(:select, as: GoogleApi.Firestore.V1beta1.Model.Projection)
  field(:startAt, as: GoogleApi.Firestore.V1beta1.Model.Cursor)
  field(:where, as: GoogleApi.Firestore.V1beta1.Model.Filter)
end

defimpl Poison.Decoder, for: GoogleApi.Firestore.V1beta1.Model.StructuredQuery do
  def decode(value, options) do
    GoogleApi.Firestore.V1beta1.Model.StructuredQuery.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Firestore.V1beta1.Model.StructuredQuery do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
