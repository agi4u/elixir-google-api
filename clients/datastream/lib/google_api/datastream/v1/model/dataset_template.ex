# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Datastream.V1.Model.DatasetTemplate do
  @moduledoc """
  Dataset template used for dynamic dataset creation.

  ## Attributes

  *   `datasetIdPrefix` (*type:* `String.t`, *default:* `nil`) - If supplied, every created dataset will have its name prefixed by the provided value. The prefix and name will be separated by an underscore. i.e. _.
  *   `kmsKeyName` (*type:* `String.t`, *default:* `nil`) - Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}. See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
  *   `location` (*type:* `String.t`, *default:* `nil`) - Required. The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :datasetIdPrefix => String.t() | nil,
          :kmsKeyName => String.t() | nil,
          :location => String.t() | nil
        }

  field(:datasetIdPrefix)
  field(:kmsKeyName)
  field(:location)
end

defimpl Poison.Decoder, for: GoogleApi.Datastream.V1.Model.DatasetTemplate do
  def decode(value, options) do
    GoogleApi.Datastream.V1.Model.DatasetTemplate.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Datastream.V1.Model.DatasetTemplate do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
