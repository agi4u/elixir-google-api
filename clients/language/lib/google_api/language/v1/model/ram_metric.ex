# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Language.V1.Model.RamMetric do
  @moduledoc """


  ## Attributes

  *   `gibSec` (*type:* `String.t`, *default:* `nil`) - Required. VM memory in Gigabyte second, e.g. 3600. Using int64 type to match billing metrics definition.
  *   `machineSpec` (*type:* `String.t`, *default:* `nil`) - Required. Machine spec, e.g. N1_STANDARD_4.
  *   `memories` (*type:* `float()`, *default:* `nil`) - Required. VM memory in gb.
  *   `ramType` (*type:* `String.t`, *default:* `nil`) - Required. Type of ram.
  *   `trackingLabels` (*type:* `map()`, *default:* `nil`) - Billing tracking labels. They do not contain any user data but only the labels set by Vertex Core Infra itself. Tracking labels' keys are defined with special format: goog-[\\p{Ll}\\p{N}]+ E.g. "key": "goog-k8s-cluster-name","value": "us-east1-b4rk"
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :gibSec => String.t() | nil,
          :machineSpec => String.t() | nil,
          :memories => float() | nil,
          :ramType => String.t() | nil,
          :trackingLabels => map() | nil
        }

  field(:gibSec)
  field(:machineSpec)
  field(:memories)
  field(:ramType)
  field(:trackingLabels, type: :map)
end

defimpl Poison.Decoder, for: GoogleApi.Language.V1.Model.RamMetric do
  def decode(value, options) do
    GoogleApi.Language.V1.Model.RamMetric.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Language.V1.Model.RamMetric do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
