# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ChromeManagement.V1.Model.GoogleChromeManagementV1GraphicsStatusReport do
  @moduledoc """
  Information of the graphics subsystem. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceGraphicsInfo](https://chromeenterprise.google/policies/#ReportDeviceGraphicsInfo) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A

  ## Attributes

  *   `displays` (*type:* `list(GoogleApi.ChromeManagement.V1.Model.GoogleChromeManagementV1DisplayInfo.t)`, *default:* `nil`) - Output only. Information about the displays for the device.
  *   `reportTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. Time at which the graphics data was reported.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :displays =>
            list(GoogleApi.ChromeManagement.V1.Model.GoogleChromeManagementV1DisplayInfo.t())
            | nil,
          :reportTime => DateTime.t() | nil
        }

  field(:displays,
    as: GoogleApi.ChromeManagement.V1.Model.GoogleChromeManagementV1DisplayInfo,
    type: :list
  )

  field(:reportTime, as: DateTime)
end

defimpl Poison.Decoder,
  for: GoogleApi.ChromeManagement.V1.Model.GoogleChromeManagementV1GraphicsStatusReport do
  def decode(value, options) do
    GoogleApi.ChromeManagement.V1.Model.GoogleChromeManagementV1GraphicsStatusReport.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ChromeManagement.V1.Model.GoogleChromeManagementV1GraphicsStatusReport do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
