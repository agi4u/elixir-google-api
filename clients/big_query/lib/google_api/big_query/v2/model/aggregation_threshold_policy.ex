# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.BigQuery.V2.Model.AggregationThresholdPolicy do
  @moduledoc """
  Represents privacy policy associated with "aggregation threshold" method.

  ## Attributes

  *   `privacyUnitColumns` (*type:* `list(String.t)`, *default:* `nil`) - Optional. The privacy unit column(s) associated with this policy. For now, only one column per data source object (table, view) is allowed as a privacy unit column. Representing as a repeated field in metadata for extensibility to multiple columns in future. Duplicates and Repeated struct fields are not allowed. For nested fields, use dot notation ("outer.inner")
  *   `threshold` (*type:* `String.t`, *default:* `nil`) - Optional. The threshold for the "aggregation threshold" policy.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :privacyUnitColumns => list(String.t()) | nil,
          :threshold => String.t() | nil
        }

  field(:privacyUnitColumns, type: :list)
  field(:threshold)
end

defimpl Poison.Decoder, for: GoogleApi.BigQuery.V2.Model.AggregationThresholdPolicy do
  def decode(value, options) do
    GoogleApi.BigQuery.V2.Model.AggregationThresholdPolicy.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.BigQuery.V2.Model.AggregationThresholdPolicy do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
