# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.BigQuery.V2.Model.TableListTables do
  @moduledoc """


  ## Attributes

  *   `clustering` (*type:* `GoogleApi.BigQuery.V2.Model.Clustering.t`, *default:* `nil`) - Clustering specification for this table, if configured.
  *   `creationTime` (*type:* `String.t`, *default:* `nil`) - Output only. The time when this table was created, in milliseconds since the epoch.
  *   `expirationTime` (*type:* `String.t`, *default:* `nil`) - The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed.
  *   `friendlyName` (*type:* `String.t`, *default:* `nil`) - The user-friendly name for this table.
  *   `id` (*type:* `String.t`, *default:* `nil`) - An opaque ID of the table.
  *   `kind` (*type:* `String.t`, *default:* `nil`) - The resource type.
  *   `labels` (*type:* `map()`, *default:* `nil`) - The labels associated with this table. You can use these to organize and group your tables.
  *   `rangePartitioning` (*type:* `GoogleApi.BigQuery.V2.Model.RangePartitioning.t`, *default:* `nil`) - The range partitioning for this table.
  *   `requirePartitionFilter` (*type:* `boolean()`, *default:* `false`) - Optional. If set to true, queries including this table must specify a partition filter. This filter is used for partition elimination.
  *   `tableReference` (*type:* `GoogleApi.BigQuery.V2.Model.TableReference.t`, *default:* `nil`) - A reference uniquely identifying table.
  *   `timePartitioning` (*type:* `GoogleApi.BigQuery.V2.Model.TimePartitioning.t`, *default:* `nil`) - The time-based partitioning for this table.
  *   `type` (*type:* `String.t`, *default:* `nil`) - The type of table.
  *   `view` (*type:* `GoogleApi.BigQuery.V2.Model.TableListTablesView.t`, *default:* `nil`) - Information about a logical view.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :clustering => GoogleApi.BigQuery.V2.Model.Clustering.t() | nil,
          :creationTime => String.t() | nil,
          :expirationTime => String.t() | nil,
          :friendlyName => String.t() | nil,
          :id => String.t() | nil,
          :kind => String.t() | nil,
          :labels => map() | nil,
          :rangePartitioning => GoogleApi.BigQuery.V2.Model.RangePartitioning.t() | nil,
          :requirePartitionFilter => boolean() | nil,
          :tableReference => GoogleApi.BigQuery.V2.Model.TableReference.t() | nil,
          :timePartitioning => GoogleApi.BigQuery.V2.Model.TimePartitioning.t() | nil,
          :type => String.t() | nil,
          :view => GoogleApi.BigQuery.V2.Model.TableListTablesView.t() | nil
        }

  field(:clustering, as: GoogleApi.BigQuery.V2.Model.Clustering)
  field(:creationTime)
  field(:expirationTime)
  field(:friendlyName)
  field(:id)
  field(:kind)
  field(:labels, type: :map)
  field(:rangePartitioning, as: GoogleApi.BigQuery.V2.Model.RangePartitioning)
  field(:requirePartitionFilter)
  field(:tableReference, as: GoogleApi.BigQuery.V2.Model.TableReference)
  field(:timePartitioning, as: GoogleApi.BigQuery.V2.Model.TimePartitioning)
  field(:type)
  field(:view, as: GoogleApi.BigQuery.V2.Model.TableListTablesView)
end

defimpl Poison.Decoder, for: GoogleApi.BigQuery.V2.Model.TableListTables do
  def decode(value, options) do
    GoogleApi.BigQuery.V2.Model.TableListTables.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.BigQuery.V2.Model.TableListTables do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
